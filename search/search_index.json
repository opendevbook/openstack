{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Dear Students,</p> <p>Welcome to this exciting 3-day workshop on OpenStack! Over the next few days, we will embark on a journey to explore one of the most powerful and widely-used cloud platforms in the world. Whether you are here to learn more about cloud computing, or to dive into building and managing infrastructure as a service (IaaS), this workshop will equip you with the skills and knowledge to get started with OpenStack in real-world environments.</p>"},{"location":"#objectives-of-this-workshop","title":"Objectives of this Workshop:","text":"<ul> <li>To introduce you to the core services and components of OpenStack.</li> <li>To provide hands-on experience in deploying and managing cloud infrastructure.</li> <li>To help you understand the architecture and networking concepts within OpenStack.</li> <li>To give you the tools to leverage OpenStack in both development and production environments.</li> </ul>"},{"location":"#benefits-from-this-course","title":"Benefits from this Course:","text":"<ul> <li>Gain a strong foundational understanding of cloud computing and OpenStack.</li> <li>Learn how to deploy and manage OpenStack in a lab environment.</li> <li>Build the confidence to work with OpenStack on real-world cloud projects.</li> <li>Enhance your technical skills and increase your employability in the cloud computing domain.</li> </ul> <p>We are excited to guide you through this workshop and support you as you take your first steps into the world of OpenStack. Let\u2019s work together, learn together, and make the most of this opportunity.</p> <p>Let's get started and make these three days a productive and inspiring experience!</p> <p>Best regards,  Sawangpong muadphet</p>"},{"location":"about/","title":"OpenStack Summary","text":"<p>OpenStack is an open-source cloud computing platform that enables organizations to build and manage private and public clouds. Originally developed by NASA and Rackspace, OpenStack provides a suite of interconnected services that work together to deploy virtualized infrastructure (IaaS) resources such as compute, storage, and networking.</p> <p> https://www.openstack.org/ </p>"},{"location":"about/#key-components-of-openstack","title":"Key Components of OpenStack:","text":"<ol> <li>Nova \u2013 Manages and provisions virtual machines and other compute resources.</li> <li>Neutron \u2013 Provides networking services, including IP management, VLANs, and firewalling.</li> <li>Swift \u2013 Object storage system for storing and retrieving unstructured data (e.g., backups, media).</li> <li>Cinder \u2013 Block storage management for persistent storage to be attached to virtual machines.</li> <li>Keystone \u2013 Identity service providing authentication and authorization.</li> <li>Glance \u2013 Manages images used to provision virtual machines.</li> <li>Horizon \u2013 Web-based dashboard for managing OpenStack resources.</li> </ol> <p> Image Credit: docs.redhat.com</p>"},{"location":"about/#service-type","title":"Service type","text":"Service Code Description Dashboard horizon Web browser-based dashboard that you use to manage OpenStack services. Identity keystone Centralized service for authentication and authorization of OpenStack services and for managing users, projects, and roles. OpenStack Networking neutron Provides connectivity between the interfaces of OpenStack services. Block Storage cinder Manages persistent block storage volumes for virtual machines. Compute nova Manages and provisions virtual machines running on hypervisor nodes. Image glance Registry service that you use to store resources such as virtual machine images and volume snapshots. Object Storage swift Allows users to store and retrieve files and arbitrary data. Telemetry ceilometer Provides measurements of cloud resources. Orchestration heat Template-based orchestration engine that supports automatic creation of resource stacks."},{"location":"about/#benefits-of-openstack","title":"Benefits of OpenStack:","text":"<ul> <li>Scalability: Supports small to large-scale cloud deployments with on-demand resource scaling.</li> <li>Flexibility: Offers multi-hypervisor support (KVM, VMware, Hyper-V) and integrates with various storage and networking solutions.</li> <li>Community-Driven: Backed by a strong open-source community, enabling constant improvements and adaptability.</li> </ul>"},{"location":"about/#typical-use-cases","title":"Typical Use Cases:","text":"<ul> <li>Private Cloud Infrastructure: Allows enterprises to run private clouds to manage internal resources.</li> <li>Telecommunications: Provides a foundation for network functions virtualization (NFV) for telcos.</li> <li>Public Cloud Providers: Some providers use OpenStack to offer public cloud services.</li> </ul>"},{"location":"about/#installation-and-deployment","title":"Installation and Deployment:","text":"<p>OpenStack can be installed via various methods, including DevStack (for testing), OpenStack-Ansible, and distribution packages from vendors. It\u2019s often used in environments where full control over infrastructure and customization is needed, making it ideal for large organizations, research institutions, and telecommunication companies.</p>"},{"location":"Day1%20DevStack%20Tools/1_basic/","title":"DevStack Introduction","text":"<p>DevStack is a flexible, open-source tool designed to simplify the deployment and testing of OpenStack, a powerful cloud computing platform. Originally developed for developers, DevStack enables users to set up an OpenStack environment quickly and is widely used in test and development environments rather than production.</p>"},{"location":"Day1%20DevStack%20Tools/1_basic/#key-features-of-devstack","title":"Key Features of DevStack","text":"<ol> <li>Quick Installation: DevStack automates the installation of OpenStack components, making it easy to deploy on a single machine or in a virtual environment.</li> <li>Customizable Configuration: With the <code>local.conf</code> file, users can easily customize settings, including passwords, IP addresses, and enabled services.</li> <li>IPv4 and IPv6 Support: DevStack supports IPv4 by default but can be configured for IPv6 if needed.</li> <li>Multi-Service Deployment: DevStack installs essential OpenStack services, including Nova (compute), Neutron (networking), Glance (image service), and Keystone (identity service).</li> <li>Ideal for Learning and Testing: DevStack provides a sandbox for developers and new users to experiment with OpenStack, test changes, and learn about cloud services in a controlled environment.</li> </ol>"},{"location":"Day1%20DevStack%20Tools/1_basic/#typical-installation-steps","title":"Typical Installation Steps","text":"<ol> <li>Set Up a Compatible System: DevStack runs on Linux distributions like Ubuntu or CentOS.</li> <li>Create a Non-Root User: The installation requires a non-root user with <code>sudo</code> privileges (commonly named <code>stack</code>).</li> <li>Clone the DevStack Repository: Download the DevStack codebase from GitHub.</li> <li>Configure <code>local.conf</code>: Define OpenStack settings in this file, including passwords, IP configurations, and service options.</li> <li>Run the Installation Script: Start the installation with <code>./stack.sh</code>, which installs and configures OpenStack components.</li> <li>Access the Dashboard: Once installed, users can access the Horizon web dashboard to manage OpenStack resources.</li> </ol>"},{"location":"Day1%20DevStack%20Tools/1_basic/#ideal-use-cases","title":"Ideal Use Cases","text":"<ul> <li>Developer Testing: Experiment with OpenStack services, create new features, and test changes.</li> <li>Education: Ideal for students and professionals to learn about OpenStack in a non-production setting.</li> <li>Proof of Concept: Set up a quick OpenStack environment to demonstrate cloud concepts.</li> </ul> <p>DevStack is a great tool for anyone looking to explore OpenStack's capabilities, from developers to cloud enthusiasts. However, for production environments, more robust deployment tools and practices are recommended, as DevStack is optimized for testing and not intended for long-term stability.</p>"},{"location":"Day1%20DevStack%20Tools/2_vagrant/","title":"Vagrant prepare VM","text":"<ul> <li>Ubuntu 2310</li> <li>CPU 4</li> <li>Ram 8192</li> </ul>"},{"location":"Day1%20DevStack%20Tools/2_vagrant/#vagrantfile-on-windows-virtualbox","title":"Vagrantfile on Windows Virtualbox","text":"<ul> <li>Virtualbox configuration</li> </ul> <pre><code># -*- mode: ruby -*-\n# vi: set ft=ruby :\n\n$script=&lt;&lt;-SCRIPT\n    sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config    \n    systemctl restart ssh.service\nSCRIPT\nVagrant.configure(\"2\") do |config|\n\n  config.vm.box = \"generic/ubuntu2310\"\n\n  config.vm.define \"node1\" do |control|\n    control.vm.hostname = \"node1\"\n    control.vm.network \"private_network\", ip: \"192.168.35.10\"\n    control.vm.provider \"virtualbox\" do |vb|\n      vb.memory = \"8192\"\n      vb.cpus = 4\n      vb.customize [\"modifyvm\", :id, \"--nested-hw-virt\", \"on\"]\n    end\n  end\n\n  config.vm.define \"node2\" do |control|\n    control.vm.hostname = \"node2\"\n    control.vm.network \"private_network\", ip: \"192.168.35.20\"\n    control.vm.provider \"virtualbox\" do |vb|\n      vb.memory = \"8192\"\n      vb.cpus = 4\n      vb.customize [\"modifyvm\", :id, \"--nested-hw-virt\", \"on\"]\n    end\n  end\n\n  config.vm.provision \"shell\", inline: $script\n\nend\n</code></pre> <p>Run vagrant up: <pre><code>$ vagrant up --provider=virtualbox\n$ vagrant ssh node1\n</code></pre></p>"},{"location":"Day1%20DevStack%20Tools/2_vagrant/#vagrantfile-on-linux-kvm","title":"Vagrantfile on Linux KVM","text":"<ul> <li>libvirt configuration</li> </ul> <pre><code># -*- mode: ruby -*-\n# vi: set ft=ruby :\n\n$script=&lt;&lt;-SCRIPT\n    sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config    \n    systemctl restart ssh.service\nSCRIPT\nVagrant.configure(\"2\") do |config|\n\n  config.vm.box = \"generic/ubuntu2310\"\n\n  config.vm.define \"node1\" do |control|\n    control.vm.hostname = \"node1\"\n    control.vm.network \"private_network\", ip: \"192.168.35.10\"\n    control.vm.provider \"libvirt\" do |libvirt|\n      libvirt.memory = \"8192\"\n      libvirt.cpus = 4\n      libvirt.nested = true\n    end\n  end\n\n  config.vm.define \"node2\" do |control|\n    control.vm.hostname = \"node2\"\n    control.vm.network \"private_network\", ip: \"192.168.35.20\"\n    control.vm.provider \"libvirt\" do |libvirt|\n      libvirt.memory = \"8192\"\n      libvirt.cpus = 4\n      libvirt.nested = true\n    end\n  end\n\n  config.vm.provision \"shell\", inline: $script\n\nend\n</code></pre> <p>Run vagrant up: <pre><code>$ vagrant up --provider=libvirt\n$ vagrant ssh node1\n</code></pre></p>"},{"location":"Day1%20DevStack%20Tools/3_installation/","title":"Installation","text":"<p>DevStack will clone the OpenStack source code from the official OpenStack repository, which is hosted on OpenDev (formerly known as Gerrit). The URL for cloning the OpenStack repositories is:</p> <pre><code>https://opendev.org/openstack\n</code></pre> <p>DevStack, during its setup and installation process, automatically clones the relevant OpenStack services from this repository. The <code>devstack</code> script will perform the following steps:</p> <ol> <li>Clone the OpenStack repository: DevStack clones the OpenStack source code into the directory where it is installed.</li> <li>Install required dependencies: It installs dependencies such as Python packages, libraries, and tools that are required to run OpenStack services.</li> <li>Configure services: DevStack configures OpenStack services (such as <code>keystone</code>, <code>nova</code>, <code>glance</code>, <code>neutron</code>, etc.) based on the configuration specified in the <code>local.conf</code> file.</li> <li>Start services: After configuring, DevStack will start the OpenStack services on the system.</li> </ol> <p>By default, the main OpenStack repositories (such as <code>nova</code>, <code>keystone</code>, <code>glance</code>, <code>neutron</code>, etc.) are cloned from https://opendev.org/openstack, and these repositories contain the code for the OpenStack services that you deploy in your environment.</p> <p>If you want to manually update or clone a specific repository, you can also browse the official OpenStack Git repositories at https://opendev.org/openstack.</p>"},{"location":"Day1%20DevStack%20Tools/3_installation/#disble-ipv6","title":"Disble IPV6","text":"<ul> <li> <p>Step 1 Open the file in a text editor, e.g., sudo vim /etc/sysctl.conf, and add the following lines to disable IPv6, set up reverse path filtering, and enable IPv4 forwarding: (append to end of files)</p> <p><pre><code>$ sudo vim /etc/sysctl.conf\n</code></pre> content: <pre><code>net.ipv6.conf.all.disable_ipv6 = 0\nnet.ipv6.conf.default.disable_ipv6 = 0\nnet.ipv6.conf.lo.disable_ipv6 = 0\nnet.ipv4.conf.default.rp_filter = 0\nnet.ipv4.conf.all.rp_filter = 0\nnet.ipv4.ip_forward = 1\n</code></pre> </p> </li> <li> <p>Step 2 Apply the Changes:</p> <ul> <li>After saving the file, apply the settings with the following command: <pre><code>$ sudo sysctl -p\n</code></pre> </li> </ul> </li> </ul>"},{"location":"Day1%20DevStack%20Tools/3_installation/#create-stack-user","title":"Create Stack User","text":"<ul> <li>Step 3 Prepare the system DevStack works best on a fresh installation of a supported Linux distribution, like Ubuntu 20.04 or CentOS/RHEL 8. Ensure your system meets these requirements:<ul> <li>Create a non-root user (e.g., stack) with sudo privileges: <pre><code>$ sudo useradd -s /bin/bash -d /opt/stack -m stack\n$ sudo usermod -aG sudo stack\n$ echo \"stack ALL=(ALL) NOPASSWD: ALL\" | sudo tee /etc/sudoers.d/stack\n$ sudo chmod +x /opt/stack\n</code></pre> Switch to stack user: <pre><code>$ sudo -u stack -i\n$ sudo apt update -y\n$ sudo apt upgrade -y\n</code></pre> Explaination:</li> <li>This command uses sudo to switch to the stack user.</li> <li>The -i flag simulates a full login, so it initializes the environment as if the stack user had logged in directly.</li> <li>It respects the sudoers configuration (i.e., the specific privileges and restrictions set for the stack user).</li> <li>The stack user\u2019s environment variables (like HOME and PATH) and login shell are loaded, providing a clean environment.</li> </ul> </li> </ul>"},{"location":"Day1%20DevStack%20Tools/3_installation/#clone-source-code-and-run","title":"Clone Source Code and Run","text":"<ul> <li> <p>Step 4 Clone the DevStack Repository:</p> <pre><code>$ git clone https://opendev.org/openstack/devstack\n$ cd devstack\n</code></pre> <p>Create local.conf inside devstack folder, Please copy content below and paste directly in terminal <pre><code>cat &lt;&lt;EOF &gt;&gt; local.conf\n[[local|localrc]]\nIP_VERSION=4\nSERVICE_IP_VERSION=4\nTUNNEL_IP_VERSION=4\nHOST_IP=192.168.35.10\nSERVICE_HOST=192.168.35.10\nMYSQL_HOST=192.168.35.10\nRABBIT_HOST=192.168.35.10\nGLANCE_HOSTPORT=192.168.35.10:9292\nADMIN_PASSWORD=secret\nDATABASE_PASSWORD=\\$ADMIN_PASSWORD\nRABBIT_PASSWORD=\\$ADMIN_PASSWORD\nSERVICE_PASSWORD=\\$ADMIN_PASSWORD\nLOGFILE=/opt/stack/logs/stack.sh.log\nFORCE=yes\nEOF\n</code></pre></p> </li> </ul> <p>Change IP address to vm ip</p> <ul> <li>Change IP address from local.conf to VM ip</li> <li>Change ADMIN_PASSWORD</li> </ul> <ul> <li>Step 5 Run the DevStack Installation: <pre><code>$ ./stack.sh\n</code></pre> This will take a 15 - 20 minutes, largely depending on the speed of your internet connection. Many git trees and packages will be installed during this process.</li> </ul> <p></p> <p>Other command</p> <ul> <li>./unstack.sh</li> <li>./clean.sh</li> </ul> <ul> <li>Step 6 Access the Openstack Dashboard<ul> <li>Open Browser <pre><code>http://YOUR_SERVER_IP/dashboard\n</code></pre> login with user admin and password specified in ADMIN_PASSWORD in local.conf</li> </ul> </li> </ul> <p></p> <p></p> <ul> <li>Step 7 Verify the installation<ul> <li>to check if services are running <pre><code>$ source openrc admin admin\n$ openstack service list\n</code></pre></li> </ul> </li> </ul> <p></p> <ul> <li>Step 8 Restart the DevStack Services:  To \"restack\" OpenStack after stopping DevStack or halting your environment, you can follow these steps:</li> </ul> <pre><code>Run ./unstack.sh to stop the services (optional).\nRun ./clean.sh (optional, for a clean restart).\nRun ./stack.sh to restart the setup.\n</code></pre>"},{"location":"Day1%20DevStack%20Tools/4_workshop/","title":"Workshop","text":"<p>Please Download pdf for workshop:</p> <p>1 Openstack API</p> <p>2 Openstack Admin management</p>"},{"location":"Day2%20Python/oop-tutorial/","title":"Understand Python OOP","text":""},{"location":"Day2%20Python/oop-tutorial/#create-python-evironment-and-create-project","title":"Create python evironment and create project","text":"<pre><code>mkdir openstack_python\ncd openstack_python\npython3 -m venv venv\nsource venv/bin/active\n</code></pre> <p>How to activate python envinronment in windows</p> <p>windows run   venv\\Scripts\\activate</p> python_lab1.py<pre><code># Define the Car class\n# Define the Car class\nfrom datetime import datetime\n\nclass Car:\n    def __init__(self, make: str, model: str, year: int, color: str) -&gt; None:\n        self.make: str = make\n        self.model: str = model\n        self.year: int = year\n        self.color: str = color\n\n    def display_info(self) -&gt; None:\n        print(f\"{self.year} {self.color} {self.make} {self.model}\")\n\n    def repaint(self, new_color: str) -&gt; None:\n        self.color = new_color\n        print(f\"The car has been repainted to {self.color}.\")\n\n    def car_age(self) -&gt; int:\n        current_year = datetime.now().year\n        return current_year - self.year\n\n    def print_self(self) -&gt; None:\n        print(f\"{self}\")\n\n# Create an instance of Car with type annotation\nmy_car: Car = Car(make=\"Toyota\", model=\"Camry\", year=2020, color=\"Red\")\n\n# Display the car's information\nmy_car.display_info()\n\n# Use the car's methods\nmy_car.repaint(\"Blue\")\nprint(f\"The car is {my_car.car_age()} years old.\")\n\nmy_car.print_self()\n\nprint(my_car)\n</code></pre> <p>Constructor (<code>__init__</code> method): This special method is called when an object is created. It is used to initialize the object\u2019s attributes.</p> <p>Class is blueprint</p> <p>a class is a blueprint for creating objects. Classes define the attributes (data) and methods (functions) that the objects created from the class will have.</p>"},{"location":"Day2%20Python/oop-tutorial/#what-happens-if-you-printself","title":"What Happens if You print(self)?","text":"<pre><code>my_car.repaint(\"Blue\")\nprint(my_car)\n\n&lt;__main__.Car object at 0x7f7e20e13cd0&gt;\n&lt;__main__.Car object at 0x7f7e20e13cd0&gt;\n</code></pre> <p>self is address in memory</p> <p>This output shows the memory address where the instance is stored, along with the class name. This representation is the default string representation of the object, and it might look cryptic.</p>"},{"location":"Day2%20Python/oop-tutorial/#benefits-of-using-classes","title":"Benefits of Using Classes","text":"<p>1 Encapsulation: Classes allow grouping of related data and functions together, making the code modular and easier to understand. 2 Reusability: Once defined, classes can be used multiple times to create different objects. 3 Inheritance: A class can inherit attributes and methods from another class, allowing you to create a hierarchy of classes. 4 Polymorphism: Classes allow for different classes to have methods with the same name but different implementations, providing flexibility in design.</p>"},{"location":"Day2%20Python/oop-tutorial/#polymorphism-with-class-methods","title":"Polymorphism with Class Methods","text":"<p>Polymorphism allows us to define a method in different classes that performs similar operations but with different implementations. For example, we might have a method called speak in different animal classes that each produce a different sound.</p> python_lab2.py<pre><code>class Dog:\n    def speak(self) -&gt; None:\n        print(\"Woof!\")\n\nclass Cat:\n    def speak(self) -&gt; None:\n        print(\"Meow!\")\n\nclass Cow:\n    def speak(self) -&gt; None:\n        print(\"Moo!\")\n\n# We can use polymorphism to call the speak method on different objects\nanimals = [Dog(), Cat(), Cow()]\n\nfor animal in animals:\n    animal.speak()  # Output: Woof!, Meow!, Moo!\n</code></pre>"},{"location":"Day2%20Python/oop-tutorial/#polymorphism-with-inheritance-and-method-overriding","title":"Polymorphism with Inheritance and Method Overriding","text":"python_lab3.py<pre><code>from math import pi\n\n# parent class\nclass Shape:\n    def area(self) -&gt; float:\n        raise NotImplementedError(\"Subclasses should implement this!\")\n\n# child class\nclass Circle(Shape):\n    def __init__(self, radius: float) -&gt; None:\n        self.radius = radius\n\n    def area(self) -&gt; float:\n        return pi * (self.radius ** 2)\n\n# child class\nclass Square(Shape):\n    def __init__(self, side: float) -&gt; None:\n        self.side = side\n\n    def area(self) -&gt; float:\n        return self.side * self.side\n\n# Using polymorphism to calculate area\nshapes = [Circle(3), Square(4)]\n\nfor shape in shapes:\n    print(shape.area())  # Output: 28.27 for Circle, 16 for Square\n</code></pre>"},{"location":"Day2%20Python/oop-tutorial/#polymorphism-with-functions-and-objects","title":"Polymorphism with Functions and Objects","text":"<p>You can also use polymorphism by passing different types of objects to the same function. This can be useful when you have different classes that implement a similar method, and you want to call that method in the function regardless of the specific class.</p> python_lab3.py<pre><code>class Bird:\n    def fly(self) -&gt; None:\n        print(\"Bird flies.\")\n\nclass Airplane:\n    def fly(self) -&gt; None:\n        print(\"Airplane flies.\")\n\nclass Superman:\n    def fly(self) -&gt; None:\n        print(\"Superman flies.\")\n\ndef make_it_fly(entity) -&gt; None:\n    entity.fly()\n\n# Passing different types of objects with a common fly method\nmake_it_fly(Bird())       # Output: Bird flies.\nmake_it_fly(Airplane())   # Output: Airplane flies.\nmake_it_fly(Superman())   # Output: Superman flies.\n</code></pre> <p>Summary:</p> <ul> <li>The make_it_fly function expects an object that has a fly method. It doesn\u2019t care what specific class the object is from.</li> <li>As long as the object passed has a fly method, the function will work, demonstrating polymorphism through a common interface.</li> </ul>"},{"location":"Day2%20Python/oop-tutorial/#inheritance-in-python","title":"Inheritance in python","text":"<p>Inheritance in Python allows a class (called a subclass or child class) to inherit attributes and methods from another class (called a superclass or parent class). This promotes code reuse and the creation of hierarchies.</p> <p>The child class can:</p> <ul> <li>Inherit methods and attributes from the parent class.</li> <li>Override methods to provide its own behavior.</li> <li>Add new methods and attributes.</li> </ul> python_lay5.py<pre><code># inheritance\nclass Vehicle:\n    def __init__(self, brand: str, model: str) -&gt; None:\n        self.brand = brand\n        self.model = model\n\n    def start(self) -&gt; None:\n        print(f\"The {self.brand} {self.model} is starting.\")\n\n    def stop(self) -&gt; None:\n        print(f\"The {self.brand} {self.model} is stopping.\")\n\n# Child class inherits from Vehicle\nclass Car(Vehicle):\n    def __init__(self, brand: str, model: str, doors: int) -&gt; None:\n        super().__init__(brand, model)  # Call the parent class constructor\n        self.doors = doors\n\n    def honk(self) -&gt; None:\n        print(\"Beep! Beep!\")\n\n\n\n# Creating an instance of the Car class\nmy_car = Car(\"Toyota\", \"Corolla\", 4)\n\n# Accessing methods from the parent (Vehicle) class\nmy_car.start()   # Output: The Toyota Corolla is starting.\nmy_car.stop()    # Output: The Toyota Corolla is stopping.\n\n# Accessing method from the Car class\nmy_car.honk()    # Output: Beep! Beep!\n</code></pre> <p>super() is built-in function</p> <p>super() is a built-in function that allows you to call a method from a parent class (also known as a superclass) from within a method in a subclass.</p> python_lab6.py<pre><code>class A:\n    def __init__(self):\n        print(\"A initialized\")\n\nclass B(A):\n    def __init__(self):\n        super().__init__()  # Calls A's __init__\n        print(\"B initialized\")\n\nclass C(A):\n    def __init__(self):\n        super().__init__()  # Calls A's __init__\n        print(\"C initialized\")\n\nclass D(B, C):\n    def __init__(self):\n        super().__init__()  # Calls B's __init__ (because B is before C in the MRO)\n        print(\"D initialized\")\n\n# Creating an instance of D\nd = D()\n</code></pre> <p>Result:</p> <pre><code>A initialized\nC initialized\nB initialized\nD initialized\n</code></pre>"},{"location":"Day2%20Python/oop-tutorial/#overide-method-by-child","title":"Overide method by Child","text":"python_lab7.py<pre><code>class Vehicle:\n    def __init__(self, brand: str, model: str) -&gt; None:\n        self.brand = brand\n        self.model = model\n\n    def start(self) -&gt; None:\n        print(f\"The {self.brand} {self.model} is starting.\")\n\n    def stop(self) -&gt; None:\n        print(f\"The {self.brand} {self.model} is stopping.\")\n\n# Child class inherits from Vehicle\nclass Car(Vehicle):\n    def __init__(self, brand: str, model: str, doors: int) -&gt; None:\n        super().__init__(brand, model)  # Call the parent class constructor\n        self.doors = doors\n\n    def honk(self) -&gt; None:\n        print(\"Beep! Beep!\")\n\n\n    def start(self) -&gt; None:\n        print(f\"The {self.brand} {self.model} with {self.doors} doors is starting in a new way!\")\n\n# Creating an instance of Car\nmy_new_car = Car(\"Honda\", \"Civic\", 4)\n\n# The start method is overridden in Car, so it uses the new implementation\nmy_new_car.start()   # Output: The Honda Civic with 4 doors is starting in a new way!\n</code></pre>"},{"location":"Day2%20Python/oop-tutorial/#method-of-class","title":"Method of Class","text":"<p>In Python, a method is a function defined inside a class that operates on instances of that class. Methods allow objects created from the class to perform actions, modify attributes, or return information related to the object. There are several types of methods commonly used in classes:</p> <p>1 Instance Methods: These work with a specific instance of a class and typically modify or return information specific to that instance. 2 Class Methods: These are used on the class itself, rather than on instances of the class, and are often used to create alternative constructors. 3 Static Methods: These don\u2019t modify class or instance data but are related to the class in terms of functionality. They behave like regular functions but are logically grouped within the class.</p>"},{"location":"Day2%20Python/oop-tutorial/#1-instance-methods","title":"1 Instance Methods","text":"<p>Instance methods are the most common type of method. They operate on a single instance of a class and typically modify or access the instance's attributes. Instance methods always take self as the first parameter, which represents the instance of the class that is calling the method.</p> python_lab8<pre><code># Instance Methods\nclass Person:\n    def __init__(self, name: str, age: int) -&gt; None:\n        self.name = name\n        self.age = age\n\n    # Instance method\n    def introduce(self) -&gt; None:\n        print(f\"Hello, my name is {self.name} and I am {self.age} years old.\")\n\n    # Instance method that modifies an attribute\n    def have_birthday(self) -&gt; None:\n        self.age += 1  # Increase age by 1\n        print(f\"Happy Birthday! I am now {self.age} years old.\")\n\n# Creating an instance and calling instance methods\nperson1 = Person(\"Alice\", 30)\nperson1.introduce()      # Output: Hello, my name is Alice and I am 30 years old.\nperson1.have_birthday()  # Output: Happy Birthday! I am now 31 years old.\n</code></pre>"},{"location":"Day2%20Python/oop-tutorial/#2-class-methods","title":"2 Class Methods","text":"<p>Class methods operate on the class itself rather than on instances. They are often used as factory methods to create instances in a specific way. Class methods are defined using the @classmethod decorator, and they take cls (short for class) as the first parameter instead of self.</p> python_lab9<pre><code># Class Methods\n\nclass Person:\n    species = \"Homo sapiens\"  # Class attribute\n\n    def __init__(self, name: str, age: int) -&gt; None:\n        self.name = name\n        self.age = age\n\n    @classmethod\n    def create_baby(cls, name: str) -&gt; \"Person\":\n        # Class method to create a new instance with age 0\n        return cls(name, age=0)\n\n# Using the class method to create a baby person\nbaby = Person.create_baby(\"Charlie\")\nprint(baby.name)  # Output: Charlie\nprint(baby.age)   # Output: 0\n</code></pre>"},{"location":"Day2%20Python/oop-tutorial/#3-static-methods","title":"3 Static Methods","text":"<p>Static methods are utility methods that are related to the class but don\u2019t require access to any instance-specific data or the class itself. They\u2019re defined using the @staticmethod decorator and do not take self or cls as a parameter.</p> python_lab10<pre><code># Static Method\n\nclass MathUtils:\n    @staticmethod\n    def add(a: int, b: int) -&gt; int:\n        return a + b\n\n    @staticmethod\n    def multiply(a: int, b: int) -&gt; int:\n        return a * b\n\n# Calling static methods without creating an instance\nprint(MathUtils.add(5, 10))         # Output: 15\nprint(MathUtils.multiply(3, 7))     # Output: 21\n</code></pre>"},{"location":"Day2%20Python/openstack-sdk/","title":"Openstack RESTFULL API","text":"list endpoint<pre><code>source openrc admin admin\nopenstack endpoint list\n</code></pre> <p>using OpenStack, organizations can build private clouds with complete control over the underlying infrastructure and leverage a variety of powerful cloud computing services, all while being able to interact with the system through standard RESTful interfaces.</p> <p>To interact with OpenStack services using Python, you can use Python's requests module to send RESTful API requests. OpenStack components expose their functionality via HTTP RESTful APIs, and you can automate or interact with OpenStack by sending HTTP requests to the relevant API endpoints.</p> <pre><code>mkdir openstack\ncd openstack\n\npip install requests\n</code></pre>"},{"location":"Day2%20Python/openstack-sdk/#keystone-api-port-5000","title":"keystone api port 5000","text":"openstack_lab1.py<pre><code>import requests\nimport json\n\n# Define the OpenStack Keystone endpoint and credentials\nkeystone_url = 'http://192.168.35.10/identity/v3/auth/tokens'\nusername = 'admin'\npassword = 'secret'\nproject_name = 'admin'\ndomain_name = 'default'\nauth_payload = {\n    \"auth\": {\n        \"identity\": {\n            \"methods\": [\"password\"],\n            \"password\": {\n                \"user\": {\n                    \"name\": username,\n                    \"domain\": {\"name\": domain_name},\n                    \"password\": password\n                }\n            }\n        },\n        \"scope\": {\n            \"project\": {\n                \"name\": project_name,\n                \"domain\": {\"name\": domain_name}\n            }\n        }\n    }\n}\n\n# Send authentication request to Keystone\nheaders = {'Content-Type': 'application/json'}\nresponse = requests.post(keystone_url, data=json.dumps(auth_payload), headers=headers)\n\n# Check if authentication is successful\nif response.status_code == 201:\n    token = response.headers['X-Subject-Token']\n    print(f\"Authentication Successful. Token: {token}\")\nelse:\n    print(f\"Authentication Failed. Status Code: {response.status_code}\")\n</code></pre> <p>Test result:</p> <pre><code>python openstack_lab1.py\nAuthentication Successful. Token: gAAAAABnNpuWzOsmEeYMVp7ciziW8IRKr5sjLgJ5n830rzEnDYxj0h5Xaix5ouKY3XAcXFaOS6t3nejEQIMx1bSjeSo57EeDhmfI0G8qY1YcqK_esePSet_TfynDbArVyD99cP-Bshddp_xeVYCd3zjm2hvz-zXFE2lo-hIi8R0qVVNqJTECnyU\n</code></pre> <p></p>"},{"location":"Day2%20Python/openstack-sdk/#nova-api-port-5000","title":"Nova api port 5000","text":"<p>List of Compute Instances</p> openstack_lab1.py<pre><code># Define the Nova API endpoint for listing servers (VMs)\nnova_url = 'http://&lt;nova-server&gt;:8774/v2.1/servers'\nheaders = {\n    'X-Auth-Token': token  # Use the token obtained from Keystone\n}\n\n# Send GET request to list the servers\nresponse = requests.get(nova_url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    servers = response.json()['servers']\n    print(\"List of Servers:\")\n    for server in servers:\n        print(f\"Server Name: {server['name']}, ID: {server['id']}\")\nelse:\n    print(f\"Failed to fetch servers. Status Code: {response.status_code}\")\n</code></pre>"},{"location":"Day2%20Python/openstack-sdk/#create-new-virtual-machine","title":"Create new virtual machine","text":"<p>create new virtualmachine</p> openstack_lab3.py<pre><code>import requests\nimport json\n\n# Define the OpenStack Keystone endpoint and credentials\nkeystone_url = 'http://192.168.35.10/identity/v3/auth/tokens'\nusername = 'admin'\npassword = 'secret'\nproject_name = 'admin'\ndomain_name = 'default'\nauth_payload = {\n    \"auth\": {\n        \"identity\": {\n            \"methods\": [\"password\"],\n            \"password\": {\n                \"user\": {\n                    \"name\": username,\n                    \"domain\": {\"name\": domain_name},\n                    \"password\": password\n                }\n            }\n        },\n        \"scope\": {\n            \"project\": {\n                \"name\": project_name,\n                \"domain\": {\"name\": domain_name}\n            }\n        }\n    }\n}\n\n# Send authentication request to Keystone\nheaders = {'Content-Type': 'application/json'}\nresponse = requests.post(keystone_url, data=json.dumps(auth_payload), headers=headers)\n\n# Check if authentication is successful\nif response.status_code == 201:\n    token = response.headers['X-Subject-Token']\n    print(f\"Authentication Successful. Token: {token}\")\nelse:\n    print(f\"Authentication Failed. Status Code: {response.status_code}\")\n\n\n# Define the Nova API endpoint for listing servers (VMs)\n\nnova_url = 'http://192.168.35.10/compute/v2.1/servers'\nheaders = {\n    'X-Auth-Token': token  # Use the token obtained from Keystone\n}\n\n# Send GET request to list the servers\nresponse = requests.get(nova_url, headers=headers)\n\n# Check if the request was successful\nif response.status_code == 200:\n    servers = response.json()['servers']\n    print(\"List of Servers:\")\n    for server in servers:\n        print(f\"Server Name: {server['name']}, ID: {server['id']}\")\nelse:\n    print(f\"Failed to fetch servers. Status Code: {response.status_code}\")\n</code></pre> <p>Test Result</p> <pre><code>\u276f python openstack_lab2.py\nAuthentication Successful. Token: gAAAAABnNp0FwNVSRxlzlkL0Mib2lXM7xFppqzuegrWPZcH5tD8UvV6rPLBJXrFjB5Cp5Z7GyRXRbfjq4Zla_bTZkrQ9gKejviKyTZf_iGwJZ0VjBfWh5IjZVBi4diIF_iZYt4uTctkgC32J8sGqfVRP1p3lp6AxODG1BTnR605S73ATKDVHYgg\nList of Servers:\n</code></pre> <p></p> <p>Try to add some instance server:</p> <p></p> <p>Run python code again:</p> list server<pre><code>\u276f python openstack_lab2.py\nAuthentication Successful. Token: gAAAAABnNp7GjOyGQHg5Ct74XgHyDHgl0RMgYyv734mZxENsRSb7NhQD1n46ByK-v9j1axtf2diSwj6R2GTq_zeUAs3NbKkKkU1P-7Fuzhhad24vj4U5aW6Vb2O-CrB6UD_PdaEqeJMcy4hlZSIxdGt97pgn0ww4_yTKRsXsr9DkAHZn2lTd5-Y\nList of Servers:\nServer Name: myserver1, ID: b3a6a31b-3280-4b5b-b6b8-db8e3086a791\n</code></pre> <p></p>"},{"location":"Day2%20Python/openstack-sdk/#create-server","title":"Create Server","text":"openstack_lab3.py<pre><code>import requests\nimport json\n\n# Define the OpenStack Keystone endpoint and credentials\nkeystone_url = 'http://192.168.35.10/identity/v3/auth/tokens'\nusername = 'admin'\npassword = 'secret'\nproject_name = 'admin'\ndomain_name = 'default'\nauth_payload = {\n    \"auth\": {\n        \"identity\": {\n            \"methods\": [\"password\"],\n            \"password\": {\n                \"user\": {\n                    \"name\": username,\n                    \"domain\": {\"name\": domain_name},\n                    \"password\": password\n                }\n            }\n        },\n        \"scope\": {\n            \"project\": {\n                \"name\": project_name,\n                \"domain\": {\"name\": domain_name}\n            }\n        }\n    }\n}\n\n# Send authentication request to Keystone\nheaders = {'Content-Type': 'application/json'}\nresponse = requests.post(keystone_url, data=json.dumps(auth_payload), headers=headers)\n\n# Check if authentication is successful\nif response.status_code == 201:\n    token = response.headers['X-Subject-Token']\n    print(f\"Authentication Successful. Token: {token}\")\nelse:\n    print(f\"Authentication Failed. Status Code: {response.status_code}\")\n\n\n# Define the Nova API endpoint for creating a server\ncreate_url = 'http://192.168.35.10/compute/v2.1'\n\n# Define the server creation payload\nserver_payload = {\n    \"server\": {\n        \"name\": \"myserver2\",\n        \"imageRef\": \"24bf9fa6-2356-4188-b86c-b464ab518a30\",  # Replace with the ID of the image to use\n        \"flavorRef\": \"1\",  # Replace with the ID of the flavor to use\n        \"networks\": [{\"uuid\": \"e004d12c-2b71-4792-a931-cdeae4f1e040\"}]  # Replace with the UUID of the network\n    }\n}\n\n# Send POST request to create the server\nresponse = requests.post(create_url, json=server_payload, headers={'X-Auth-Token': token})\n\n# Check if the server creation was successful\nif response.status_code == 202:\n    server = response.json()['server']\n    print(f\"Server created successfully. Name: {server['name']}, ID: {server['id']}\")\nelse:\n    print(f\"Failed to create server. Status Code: {response.status_code}\")\n</code></pre>"},{"location":"Day2%20Python/openstack-sdk/#conclusion","title":"Conclusion","text":"<p>This tutorial provided a basic overview of how to interact with OpenStack services using Python and RESTful APIs. By obtaining an authentication token from Keystone and using it to access other services like Nova, you can automate tasks such as listing servers, creating new virtual machines, or managing resources within your OpenStack cloud.</p> <p>You can extend this basic functionality to interact with other OpenStack services, like Cinder (block storage), Neutron (networking), and Swift (object storage), following a similar pattern of using authentication tokens and sending appropriate RESTful requests.</p>"},{"location":"Day2%20Python/python-module/","title":"Python Module","text":"<p>A Python module is a file containing Python code that defines functions, classes, variables, and runnable code. Modules help organize Python code logically, making it easier to reuse and maintain</p> <p>Key Concepts of Python Modules: 1 Definition:</p> <ul> <li>A Python module is a .py file that contains Python definitions and statements. The module name is the filename without the .py extension.</li> <li>For example, a file named math_operations.py is a module called math_operations.</li> </ul> <p>2 Importing Modules:</p> <ul> <li>You can import and use functions, classes, and variables from a module into another script using the import statement.</li> </ul> <pre><code>mkdir module\ncd module\n</code></pre> math_operations.py<pre><code># math_operations.py\n\ndef add(a: float, b: float) -&gt; float:\n    \"\"\"Returns the sum of two numbers.\"\"\"\n    return a + b\n\ndef subtract(a: float, b: float) -&gt; float:\n    \"\"\"Returns the difference of two numbers (a - b).\"\"\"\n    return a - b\n\ndef multiply(a: float, b: float) -&gt; float:\n    \"\"\"Returns the product of two numbers.\"\"\"\n    return a * b\n\ndef divide(a: float, b: float) -&gt; float:\n    \"\"\"Returns the quotient of two numbers (a / b). Raises an error if b is 0.\"\"\"\n    if b == 0:\n        raise ValueError(\"Cannot divide by zero.\")\n    return a / b\n\ndef power(base: float, exponent: int) -&gt; float:\n    \"\"\"Returns the result of raising base to the power of exponent.\"\"\"\n    return base ** exponent\n\ndef square_root(a: float) -&gt; float:\n    \"\"\"Returns the square root of a number.\"\"\"\n    if a &lt; 0:\n        raise ValueError(\"Cannot compute the square root of a negative number.\")\n    return a ** 0.5\n\ndef absolute(a: float) -&gt; float:\n    \"\"\"Returns the absolute value of a number.\"\"\"\n    return abs(a)\n\nprint(__name__)\n</code></pre> <p>import module</p> math_lab1.py<pre><code># Importing a module\nimport math_operations\n\n# Using a function from the module\nresult = math_operations.add(5, 3)\nprint(result)\n</code></pre> <p>Alternatively, you can import specific items from a module using from ... import:</p> math_lab2.py<pre><code>from math_operations import add\nresult = add(5, 3)\nprint(result)\n</code></pre> <p>Built-in Modules:</p> <ul> <li>Python comes with a large standard library of modules that provide built-in functionality.</li> <li> <p>Common examples include:</p> </li> <li> <p>math: Mathematical functions (sqrt(), sin(), etc.)</p> </li> <li>os: Operating system-related functionality (file handling, directory management)</li> <li>sys: System-specific parameters and functions</li> <li>random: Random number generation</li> <li>datetime: Working with dates and times</li> </ul> <p>Example os module:</p> module_lab1.py<pre><code>import os\n\n# 1. Get the current working directory\ncurrent_directory = os.getcwd()\nprint(f\"Current working directory: {current_directory}\")\n\n# 2. List all files and directories in the current directory\nfiles_and_dirs = os.listdir(current_directory)\nprint(f\"Files and directories in '{current_directory}': {files_and_dirs}\")\n\n# 3. Make a new directory\nnew_dir = \"example_directory\"\nos.mkdir(new_dir)\nprint(f\"Created new directory: {new_dir}\")\n\n# 4. Change the current working directory\nos.chdir(new_dir)\nprint(f\"Changed directory to: {os.getcwd()}\")\n\n# 5. Get environment variables\npath = os.getenv('PATH')\nprint(f\"PATH environment variable: {path}\")\n\n# 6. Remove the directory (must be empty)\nos.chdir('..')  # Go back to the original directory before removing\nos.rmdir(new_dir)\nprint(f\"Removed directory: {new_dir}\")\n</code></pre> <p>Key Functions:</p> <ul> <li>os.getcwd(): Returns the current working directory.</li> <li>os.listdir(path): Returns a list of files and directories in the specified path.</li> <li>os.mkdir(path): Creates a new directory.</li> <li>os.chdir(path): Changes the current working directory to the specified path.</li> <li>os.getenv(name): Returns the value of an environment variable (e.g., 'PATH').</li> <li>os.rmdir(path): Removes an empty directory.</li> </ul> <p>Example sys module:</p> module_lab2.py<pre><code>import sys\n\n# 1. Get the Python version\npython_version = sys.version\nprint(f\"Python version: {python_version}\")\n\n# 2. Get the platform (e.g., Windows, Linux, macOS)\nplatform = sys.platform\nprint(f\"Platform: {platform}\")\n\n# 3. Get the command-line arguments passed to the script\nprint(\"Command-line arguments:\")\nfor arg in sys.argv:\n    print(arg)\n\n# 4. Exiting the program with a status code\nif len(sys.argv) &lt; 2:\n    print(\"No argument provided. Exiting with status 1.\")\n    sys.exit(1)\nelse:\n    print(f\"Argument passed: {sys.argv[1]}\")\n\n# 5. Get the size of an object (in bytes)\nimport os\nfile_size = os.path.getsize('example_file.txt')  # Replace with an actual file\nprint(f\"Size of 'example_file.txt': {file_size} bytes\")\n\n# 6. Add a directory to the module search path\nsys.path.append('/path/to/your/modules')\nprint(f\"Updated sys.path: {sys.path}\")\n</code></pre> <p>Key Functions:</p> <ul> <li>sys.version: Returns the Python version as a string.</li> <li>sys.platform: Returns the platform on which Python is running (e.g., 'win32', 'linux').</li> <li>sys.argv: A list of command-line arguments passed to the script. The first element is the script name, followed by any arguments.</li> <li>sys.exit([status]): Exits the program with an optional status code (default is 0 for success).</li> <li>sys.path.append(path): Adds a directory to the Python module search path, enabling you to import modules from non-standard locations.</li> </ul> Module Function Description <code>os</code> <code>os.getcwd()</code> Get the current working directory. <code>os.listdir(path)</code> List files and directories in the specified path. <code>os.mkdir(path)</code> Create a new directory. <code>os.chdir(path)</code> Change the current working directory. <code>os.getenv(name)</code> Get the value of an environment variable. <code>os.rmdir(path)</code> Remove an empty directory. <code>sys</code> <code>sys.version</code> Get the Python version. <code>sys.platform</code> Get the platform type (e.g., Windows, Linux). <code>sys.argv</code> Get command-line arguments passed to the script. <code>sys.exit([status])</code> Exit the program with an optional status code. <code>sys.path.append(path)</code> Add a directory to the module search path."},{"location":"Day2%20Python/python-module/#__main__","title":"<code>__main__</code>","text":"<p>The name Variable:</p> <p>The special name variable helps distinguish whether a Python file is being run as a script or being imported as a module. If the file is being run directly, name is set to \"main\". If it is imported as a module, name is set to the module's name.</p> module_lab3.py<pre><code>def main():\n    print(\"call when run script\")\n    print(__name__)\n\nif __name__ == \"__main__\":\n    print(\"This is a script\")\n    main()\nelse:\n    print(\"This is imported as a module\")\n</code></pre> <p>!!! info 'What is name == \"main\" '</p> <pre><code>`__name__` variable will return `__name__` when run as script directly\n`__name__` variable will return \"nameof library\"\n</code></pre> module_lab3.py modify<pre><code>import math_operations\n\ndef main():\n    print(\"call when run script\")\n    print(__name__)\n\nif __name__ == \"__main__\":\n    print(\"This is a script\")\n    main()\nelse:\n    print(\"This is imported as a module\")\n</code></pre>"},{"location":"Day3%20Admin/public_network/","title":"Study public network","text":""},{"location":"Day3%20Admin/public_network/#ubuntu-version","title":"ubuntu Version","text":""},{"location":"Day3%20Admin/public_network/#repository-list","title":"Repository list","text":""},{"location":"Day3%20Admin/public_network/#vagrantfile-bentoubuntu-2404","title":"\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19 Vagrantfile 'bento/ubuntu-24.04'","text":"add more interface<pre><code># -*- mode: ruby -*-\n# vi: set ft=ruby :\n\n$script=&lt;&lt;-SCRIPT\n    sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config\n    systemctl restart ssh.service\nSCRIPT\nVagrant.configure(\"2\") do |config|\n\n  config.vm.box = \"bento/ubuntu-24.04\"\n\n  config.vm.define \"node1\" do |control|\n    control.vm.hostname = \"node1\"\n    control.vm.network \"private_network\", ip: \"192.168.35.10\"\n    control.vm.network \"private_network\", ip: \"192.168.40.10\"\n    control.vm.provider \"virtualbox\" do |vb|\n      vb.memory = \"8192\"\n      vb.cpus = 4\n      vb.customize [\"modifyvm\", :id, \"--nested-hw-virt\", \"on\"]\n    end\n  end\n\n  config.vm.define \"node2\" do |control|\n    control.vm.hostname = \"node2\"\n    control.vm.network \"private_network\", ip: \"192.168.35.20\"\n    control.vm.network \"private_network\", ip: \"192.168.40.20\"\n    control.vm.provider \"virtualbox\" do |vb|\n      vb.memory = \"8192\"\n      vb.cpus = 4\n      vb.customize [\"modifyvm\", :id, \"--nested-hw-virt\", \"on\"]\n    end\n  end\n\n  config.vm.provision \"shell\", inline: $script\n\nend\n</code></pre>"},{"location":"Day3%20Admin/public_network/#server","title":"\u0e2a\u0e31\u0e48\u0e07\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 \u0e2a\u0e23\u0e49\u0e32\u0e07 server","text":"vagrant up<pre><code>vagrant up\nvagrant ssh node1\n</code></pre>"},{"location":"Day3%20Admin/public_network/#kernel-parameter","title":"kernel parameter","text":"<pre><code>sudo vim /etc/sysctl.conf\n</code></pre> <pre><code>net.ipv6.conf.all.disable_ipv6 = 0\nnet.ipv6.conf.default.disable_ipv6 = 0\nnet.ipv6.conf.lo.disable_ipv6 = 0\nnet.ipv4.conf.default.rp_filter = 0\nnet.ipv4.conf.all.rp_filter = 0\nnet.ipv4.ip_forward = 1\n</code></pre> <pre><code>sudo sysctl -p\n</code></pre>"},{"location":"Day3%20Admin/public_network/#stack-user","title":"\u0e40\u0e1e\u0e34\u0e48\u0e21 stack user","text":"create user<pre><code>$ sudo useradd -s /bin/bash -d /opt/stack -m stack\n$ sudo chmod +x /opt/stack\n</code></pre>"},{"location":"Day3%20Admin/public_network/#sudo-user-stack","title":"\u0e40\u0e1e\u0e34\u0e48\u0e21 \u0e2a\u0e34\u0e17\u0e18\u0e34\u0e4c sudo \u0e43\u0e2b\u0e49\u0e41\u0e01\u0e48 user stack","text":"<pre><code>$ echo \"stack ALL=(ALL) NOPASSWD: ALL\" | sudo tee /etc/sudoers.d/stack\n$ sudo -u stack -i\n</code></pre>"},{"location":"Day3%20Admin/public_network/#repository-ubuntu","title":"\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19 Repository \u0e02\u0e2d\u0e07 Ubuntu","text":"<pre><code>cd /etc/apt/sources.list.d\nsudo vim ubuntu.sources\n</code></pre> <pre><code>Types: deb\nURIs: http://de.archive.ubuntu.com/ubuntu/\nSuites: noble noble-updates noble-backports\nComponents: main restricted universe multiverse\nSigned-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg\n\nTypes: deb\nURIs: http://security.ubuntu.com/ubuntu/\nSuites: noble-security\nComponents: main restricted universe multiverse\nSigned-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg\n</code></pre> <ul> <li>\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19 de.archive.ubuntu.com \u0e40\u0e1b\u0e47\u0e19 mirror1.ku.ac.th</li> </ul>"},{"location":"Day3%20Admin/public_network/#update","title":"update","text":"<pre><code>sudo apt update -y\nsudo apt upgrade -y\n</code></pre>"},{"location":"Day3%20Admin/public_network/#download-devstack","title":"Download \u0e42\u0e04\u0e49\u0e14 devstack","text":"<pre><code>git clone https://opendev.org/openstack/devstack\ncd devstack\nvim local.conf\n</code></pre>"},{"location":"Day3%20Admin/public_network/#localconf","title":"\u0e2a\u0e23\u0e49\u0e32\u0e07 \u0e44\u0e1f\u0e25\u0e4c local.conf","text":"<pre><code>[[local|localrc]]\nPUBLIC_INTERFACE=eth2\nIP_VERSION=4\nSERVICE_IP_VERSION=4\nTUNNEL_IP_VERSION=4\nHOST_IP=192.168.35.10\nFLOATING_RANGE=192.168.40.100/27\nSERVICE_HOST=192.168.35.10\nMYSQL_HOST=192.168.35.10\nRABBIT_HOST=192.168.35.10\nGLANCE_HOSTPORT=192.168.35.10:9292\nADMIN_PASSWORD=secret\nDATABASE_PASSWORD=$ADMIN_PASSWORD\nRABBIT_PASSWORD=$ADMIN_PASSWORD\nSERVICE_PASSWORD=$ADMIN_PASSWORD\nLOGFILE=/opt/stack/logs/stack.sh.log\nFORCE=yes\n</code></pre>"},{"location":"Day3%20Admin/public_network/#_1","title":"\u0e40\u0e21\u0e37\u0e48\u0e2d\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07 \u0e40\u0e23\u0e35\u0e22\u0e1a\u0e23\u0e49\u0e2d\u0e22","text":""},{"location":"Day3%20Admin/public_network/#network-ip-a","title":"\u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14 \u0e02\u0e2d\u0e07 network ip a","text":""},{"location":"Day3%20Admin/public_network/#localrc-openstack-devstack","title":"\u0e44\u0e1f\u0e25\u0e4c <code>localrc</code> \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07 OpenStack (DevStack)","text":"<p>\u0e44\u0e1f\u0e25\u0e4c\u0e19\u0e35\u0e49\u0e01\u0e33\u0e2b\u0e19\u0e14\u0e04\u0e48\u0e32\u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32 OpenStack \u0e1c\u0e48\u0e32\u0e19 DevStack \u0e42\u0e14\u0e22\u0e40\u0e09\u0e1e\u0e32\u0e30\u0e43\u0e19\u0e2a\u0e20\u0e32\u0e1e\u0e41\u0e27\u0e14\u0e25\u0e49\u0e2d\u0e21\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e1e\u0e31\u0e12\u0e19\u0e32\u0e2b\u0e23\u0e37\u0e2d\u0e17\u0e14\u0e25\u0e2d\u0e07\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19</p>"},{"location":"Day3%20Admin/public_network/#_2","title":"\u0e04\u0e33\u0e2d\u0e18\u0e34\u0e1a\u0e32\u0e22\u0e04\u0e48\u0e32\u0e1e\u0e32\u0e23\u0e32\u0e21\u0e34\u0e40\u0e15\u0e2d\u0e23\u0e4c","text":""},{"location":"Day3%20Admin/public_network/#_3","title":"\u0e01\u0e32\u0e23\u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22","text":"<ul> <li> <p><code>PUBLIC_INTERFACE=eth2</code>   \u0e01\u0e33\u0e2b\u0e19\u0e14\u0e0a\u0e37\u0e48\u0e2d\u0e2d\u0e34\u0e19\u0e40\u0e17\u0e2d\u0e23\u0e4c\u0e40\u0e1f\u0e0b\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\u0e20\u0e32\u0e22\u0e19\u0e2d\u0e01 (External Network)</p> </li> <li> <p><code>IP_VERSION=4</code>, <code>SERVICE_IP_VERSION=4</code>, <code>TUNNEL_IP_VERSION=4</code>   \u0e23\u0e30\u0e1a\u0e38\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49 IPv4 \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22:</p> </li> <li> <p>\u0e01\u0e32\u0e23\u0e2a\u0e37\u0e48\u0e2d\u0e2a\u0e32\u0e23\u0e17\u0e31\u0e48\u0e27\u0e44\u0e1b (IP Version)</p> </li> <li>\u0e01\u0e32\u0e23\u0e2a\u0e37\u0e48\u0e2d\u0e2a\u0e32\u0e23\u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23 (Service IP)</li> <li> <p>\u0e01\u0e32\u0e23\u0e2a\u0e37\u0e48\u0e2d\u0e2a\u0e32\u0e23\u0e1c\u0e48\u0e32\u0e19 tunnel (Tunnel IP)</p> </li> <li> <p><code>HOST_IP=192.168.35.10</code>   \u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48 IP \u0e02\u0e2d\u0e07\u0e42\u0e2e\u0e2a\u0e15\u0e4c\u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49\u0e23\u0e31\u0e19 DevStack</p> </li> <li> <p><code>FLOATING_RANGE=192.168.40.100/27</code>   \u0e0a\u0e48\u0e27\u0e07\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48 IP \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a Floating IP \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d VM \u0e01\u0e31\u0e1a\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\u0e20\u0e32\u0e22\u0e19\u0e2d\u0e01</p> </li> </ul>"},{"location":"Day3%20Admin/public_network/#_4","title":"\u0e01\u0e32\u0e23\u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32\u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23","text":"<ul> <li> <p><code>SERVICE_HOST=192.168.35.10</code>   \u0e23\u0e30\u0e1a\u0e38\u0e42\u0e2e\u0e2a\u0e15\u0e4c\u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49\u0e23\u0e31\u0e19\u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23 OpenStack \u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14</p> </li> <li> <p><code>MYSQL_HOST=192.168.35.10</code>   \u0e23\u0e30\u0e1a\u0e38\u0e42\u0e2e\u0e2a\u0e15\u0e4c\u0e17\u0e35\u0e48\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e10\u0e32\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 MySQL</p> </li> <li> <p><code>RABBIT_HOST=192.168.35.10</code>   \u0e23\u0e30\u0e1a\u0e38\u0e42\u0e2e\u0e2a\u0e15\u0e4c\u0e17\u0e35\u0e48\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07 RabbitMQ (Message Queue)</p> </li> <li> <p><code>GLANCE_HOSTPORT=192.168.35.10:9292</code>   \u0e23\u0e30\u0e1a\u0e38 Endpoint \u0e02\u0e2d\u0e07 Glance \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 Image</p> </li> </ul>"},{"location":"Day3%20Admin/public_network/#_5","title":"\u0e01\u0e32\u0e23\u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32\u0e23\u0e2b\u0e31\u0e2a\u0e1c\u0e48\u0e32\u0e19","text":"<ul> <li> <p><code>ADMIN_PASSWORD=secret</code>   \u0e23\u0e2b\u0e31\u0e2a\u0e1c\u0e48\u0e32\u0e19\u0e02\u0e2d\u0e07\u0e1c\u0e39\u0e49\u0e14\u0e39\u0e41\u0e25\u0e23\u0e30\u0e1a\u0e1a (Admin)</p> </li> <li> <p><code>DATABASE_PASSWORD=$ADMIN_PASSWORD</code>   \u0e23\u0e2b\u0e31\u0e2a\u0e1c\u0e48\u0e32\u0e19\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e40\u0e02\u0e49\u0e32\u0e16\u0e36\u0e07\u0e10\u0e32\u0e19\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25</p> </li> <li> <p><code>RABBIT_PASSWORD=$ADMIN_PASSWORD</code>   \u0e23\u0e2b\u0e31\u0e2a\u0e1c\u0e48\u0e32\u0e19\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a RabbitMQ</p> </li> <li> <p><code>SERVICE_PASSWORD=$ADMIN_PASSWORD</code>   \u0e23\u0e2b\u0e31\u0e2a\u0e1c\u0e48\u0e32\u0e19\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e40\u0e02\u0e49\u0e32\u0e16\u0e36\u0e07\u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23\u0e2d\u0e37\u0e48\u0e19 \u0e46</p> </li> </ul>"},{"location":"Day3%20Admin/public_network/#logs","title":"\u0e01\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 Logs \u0e41\u0e25\u0e30\u0e01\u0e32\u0e23\u0e1a\u0e31\u0e07\u0e04\u0e31\u0e1a\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07","text":"<ul> <li> <p><code>LOGFILE=/opt/stack/logs/stack.sh.log</code>   \u0e23\u0e30\u0e1a\u0e38\u0e44\u0e1f\u0e25\u0e4c\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e1a\u0e31\u0e19\u0e17\u0e36\u0e01 log \u0e02\u0e2d\u0e07 DevStack</p> </li> <li> <p><code>FORCE=yes</code>   \u0e1a\u0e31\u0e07\u0e04\u0e31\u0e1a\u0e43\u0e2b\u0e49 DevStack \u0e14\u0e33\u0e40\u0e19\u0e34\u0e19\u0e01\u0e32\u0e23\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e15\u0e48\u0e2d\u0e41\u0e21\u0e49\u0e08\u0e30\u0e21\u0e35\u0e02\u0e49\u0e2d\u0e1c\u0e34\u0e14\u0e1e\u0e25\u0e32\u0e14\u0e1a\u0e32\u0e07\u0e1b\u0e23\u0e30\u0e01\u0e32\u0e23</p> </li> </ul>"},{"location":"Day3%20Admin/public_network/#_6","title":"\u0e2d\u0e49\u0e32\u0e07\u0e2d\u0e34\u0e07","text":"<ul> <li>DevStack Documentation</li> </ul>"},{"location":"Day3%20Admin/public_network/#br-ex-openstack-external-network","title":"\u0e04\u0e27\u0e32\u0e21\u0e2a\u0e33\u0e04\u0e31\u0e0d\u0e02\u0e2d\u0e07 <code>br-ex</code> \u0e43\u0e19 OpenStack \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a External Network","text":"<p>\u0e2d\u0e38\u0e1b\u0e01\u0e23\u0e13\u0e4c <code>br-ex</code> \u0e2b\u0e23\u0e37\u0e2d Bridge External \u0e43\u0e19 OpenStack \u0e21\u0e35\u0e1a\u0e17\u0e1a\u0e32\u0e17\u0e2a\u0e33\u0e04\u0e31\u0e0d\u0e43\u0e19\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e42\u0e22\u0e07\u0e23\u0e30\u0e2b\u0e27\u0e48\u0e32\u0e07\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\u0e20\u0e32\u0e22\u0e43\u0e19\u0e02\u0e2d\u0e07 OpenStack \u0e41\u0e25\u0e30\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\u0e20\u0e32\u0e22\u0e19\u0e2d\u0e01 \u0e40\u0e0a\u0e48\u0e19 \u0e2d\u0e34\u0e19\u0e40\u0e17\u0e2d\u0e23\u0e4c\u0e40\u0e19\u0e47\u0e15\u0e2b\u0e23\u0e37\u0e2d\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\u0e2d\u0e07\u0e04\u0e4c\u0e01\u0e23</p>"},{"location":"Day3%20Admin/public_network/#br-ex","title":"\u0e04\u0e27\u0e32\u0e21\u0e2a\u0e33\u0e04\u0e31\u0e0d\u0e02\u0e2d\u0e07 <code>br-ex</code>","text":"<ol> <li> <p>\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 Floating IP</p> </li> <li> <p><code>br-ex</code> \u0e0a\u0e48\u0e27\u0e22\u0e43\u0e2b\u0e49 Virtual Machines (VMs) \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e40\u0e02\u0e49\u0e32\u0e16\u0e36\u0e07\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\u0e20\u0e32\u0e22\u0e19\u0e2d\u0e01\u0e44\u0e14\u0e49\u0e42\u0e14\u0e22\u0e1c\u0e48\u0e32\u0e19 Floating IP</p> </li> <li> <p>Floating IP \u0e40\u0e1b\u0e47\u0e19 IP \u0e40\u0e2a\u0e21\u0e37\u0e2d\u0e19\u0e17\u0e35\u0e48\u0e16\u0e39\u0e01\u0e01\u0e33\u0e2b\u0e19\u0e14\u0e43\u0e2b\u0e49\u0e01\u0e31\u0e1a VM \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e40\u0e02\u0e49\u0e32\u0e16\u0e36\u0e07\u0e44\u0e14\u0e49\u0e08\u0e32\u0e01\u0e20\u0e32\u0e22\u0e19\u0e2d\u0e01 \u0e40\u0e0a\u0e48\u0e19 \u0e2d\u0e34\u0e19\u0e40\u0e17\u0e2d\u0e23\u0e4c\u0e40\u0e19\u0e47\u0e15</p> </li> <li> <p>\u0e01\u0e32\u0e23\u0e01\u0e33\u0e2b\u0e19\u0e14\u0e40\u0e2a\u0e49\u0e19\u0e17\u0e32\u0e07 (Routing)</p> </li> <li> <p>\u0e40\u0e2a\u0e49\u0e19\u0e17\u0e32\u0e07\u0e01\u0e32\u0e23\u0e23\u0e31\u0e1a\u0e2a\u0e48\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e08\u0e32\u0e01 External Network \u0e16\u0e39\u0e01\u0e01\u0e33\u0e2b\u0e19\u0e14\u0e1c\u0e48\u0e32\u0e19 <code>br-ex</code> \u0e44\u0e1b\u0e22\u0e31\u0e07 VM \u0e1c\u0e48\u0e32\u0e19 Neutron Service</p> </li> <li> <p>\u0e2a\u0e19\u0e31\u0e1a\u0e2a\u0e19\u0e38\u0e19\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e17\u0e31\u0e49\u0e07 IPv4 \u0e41\u0e25\u0e30 IPv6</p> </li> <li> <p>\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e01\u0e31\u0e1a Physical Interface</p> </li> <li> <p><code>br-ex</code> \u0e17\u0e33\u0e2b\u0e19\u0e49\u0e32\u0e17\u0e35\u0e48\u0e40\u0e1b\u0e47\u0e19\u0e2a\u0e30\u0e1e\u0e32\u0e19\u0e23\u0e30\u0e2b\u0e27\u0e48\u0e32\u0e07 Virtual Bridge \u0e01\u0e31\u0e1a Physical Interface \u0e08\u0e23\u0e34\u0e07 \u0e40\u0e0a\u0e48\u0e19 <code>eth2</code></p> </li> <li> <p>\u0e0a\u0e48\u0e27\u0e22\u0e43\u0e2b\u0e49\u0e17\u0e23\u0e32\u0e1f\u0e1f\u0e34\u0e01\u0e08\u0e32\u0e01\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\u0e08\u0e23\u0e34\u0e07\u0e16\u0e39\u0e01\u0e2a\u0e48\u0e07\u0e15\u0e48\u0e2d\u0e44\u0e1b\u0e22\u0e31\u0e07\u0e23\u0e30\u0e1a\u0e1a\u0e40\u0e2a\u0e21\u0e37\u0e2d\u0e19</p> </li> <li> <p>\u0e1a\u0e17\u0e1a\u0e32\u0e17\u0e43\u0e19 Network Node</p> </li> <li><code>br-ex</code> \u0e21\u0e31\u0e01\u0e16\u0e39\u0e01\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e43\u0e19 Network Node \u0e2b\u0e23\u0e37\u0e2d Controller Node \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 External Network</li> <li>\u0e40\u0e1b\u0e47\u0e19\u0e2a\u0e48\u0e27\u0e19\u0e2a\u0e33\u0e04\u0e31\u0e0d\u0e02\u0e2d\u0e07\u0e42\u0e04\u0e23\u0e07\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e23\u0e30\u0e1a\u0e1a Networking \u0e43\u0e19 OpenStack</li> </ol>"},{"location":"Day3%20Admin/public_network/#br-ex_1","title":"\u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23\u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32 <code>br-ex</code>","text":"<ol> <li>\u0e2a\u0e23\u0e49\u0e32\u0e07 Virtual Bridge    \u0e2a\u0e23\u0e49\u0e32\u0e07 <code>br-ex</code> \u0e14\u0e49\u0e27\u0e22\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 <code>ovs-vsctl</code>:</li> </ol> devstack \u0e17\u0e33\u0e43\u0e2b\u0e49\u0e41\u0e25\u0e49\u0e27<pre><code>ovs-vsctl add-br br-ex\novs-vsctl add-port br-ex eth2\n</code></pre> <ol> <li> <p>\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e01\u0e31\u0e1a Neutron    \u0e01\u0e33\u0e2b\u0e19\u0e14 External Network \u0e43\u0e2b\u0e49\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e01\u0e31\u0e1a br-ex \u0e43\u0e19 Neutron Configuration</p> </li> <li> <p>\u0e01\u0e32\u0e23\u0e01\u0e33\u0e2b\u0e19\u0e14 Floating Range    Floating IP \u0e15\u0e49\u0e2d\u0e07\u0e16\u0e39\u0e01\u0e01\u0e33\u0e2b\u0e19\u0e14\u0e43\u0e19\u0e0a\u0e48\u0e27\u0e07\u0e17\u0e35\u0e48\u0e23\u0e2d\u0e07\u0e23\u0e31\u0e1a\u0e01\u0e31\u0e1a\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\u0e20\u0e32\u0e22\u0e19\u0e2d\u0e01 \u0e40\u0e0a\u0e48\u0e19    <pre><code>FLOATING_RANGE=192.168.40.100/27\n</code></pre></p> </li> </ol>"},{"location":"Day3%20Admin/public_network/#network-address-cidr","title":"\u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23\u0e04\u0e33\u0e19\u0e27\u0e13 Network Address \u0e08\u0e32\u0e01 CIDR","text":""},{"location":"Day3%20Admin/public_network/#network-address","title":"\u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e01\u0e32\u0e23\u0e04\u0e33\u0e19\u0e27\u0e13 Network Address","text":"<ol> <li> <p>\u0e41\u0e1b\u0e25\u0e07 IP Address \u0e40\u0e1b\u0e47\u0e19 Binary</p> </li> <li> <p>\u0e41\u0e1b\u0e25\u0e07\u0e41\u0e15\u0e48\u0e25\u0e30\u0e2a\u0e48\u0e27\u0e19 (Octet) \u0e02\u0e2d\u0e07 IP Address \u0e43\u0e2b\u0e49\u0e40\u0e1b\u0e47\u0e19\u0e40\u0e25\u0e02\u0e10\u0e32\u0e19\u0e2a\u0e2d\u0e07</p> </li> <li> <p>\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07:      <pre><code>IP Address: 192.168.40.100\nBinary:     11000000.10101000.00101000.01100100\n</code></pre></p> </li> <li> <p>\u0e41\u0e1b\u0e25\u0e07 Subnet Mask \u0e08\u0e32\u0e01 CIDR \u0e40\u0e1b\u0e47\u0e19 Binary</p> </li> <li> <p>\u0e43\u0e0a\u0e49\u0e04\u0e48\u0e32 CIDR \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e23\u0e30\u0e1a\u0e38\u0e08\u0e33\u0e19\u0e27\u0e19\u0e1a\u0e34\u0e15\u0e02\u0e2d\u0e07 Subnet Mask</p> </li> <li> <p>\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07 <code>/27</code> \u0e2b\u0e21\u0e32\u0e22\u0e16\u0e36\u0e07 27 \u0e1a\u0e34\u0e15\u0e41\u0e23\u0e01\u0e40\u0e1b\u0e47\u0e19 <code>1</code> \u0e41\u0e25\u0e30\u0e1a\u0e34\u0e15\u0e17\u0e35\u0e48\u0e40\u0e2b\u0e25\u0e37\u0e2d\u0e40\u0e1b\u0e47\u0e19 <code>0</code> <pre><code>CIDR:        /27\nSubnet Mask: 11111111.11111111.11111111.11100000\n</code></pre></p> </li> <li> <p>\u0e17\u0e33 AND Operation \u0e23\u0e30\u0e2b\u0e27\u0e48\u0e32\u0e07 Binary \u0e02\u0e2d\u0e07 IP Address \u0e41\u0e25\u0e30 Subnet Mask</p> </li> <li> <p>\u0e17\u0e33 AND (<code>1 AND 1 = 1</code>, <code>1 AND 0 = 0</code>, <code>0 AND 0 = 0</code>) \u0e23\u0e30\u0e2b\u0e27\u0e48\u0e32\u0e07 Binary \u0e02\u0e2d\u0e07 IP Address \u0e41\u0e25\u0e30 Subnet Mask</p> </li> <li> <p>\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07:      <pre><code>IP Address:     11000000.10101000.00101000.01100100\nSubnet Mask:    11111111.11111111.11111111.11100000\nResult:         11000000.10101000.00101000.01100000\n</code></pre></p> </li> <li> <p>\u0e41\u0e1b\u0e25\u0e07\u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c\u0e01\u0e25\u0e31\u0e1a\u0e40\u0e1b\u0e47\u0e19\u0e40\u0e25\u0e02\u0e10\u0e32\u0e19\u0e2a\u0e34\u0e1a</p> </li> <li>\u0e41\u0e1b\u0e25\u0e07 Binary \u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c\u0e01\u0e25\u0e31\u0e1a\u0e40\u0e1b\u0e47\u0e19\u0e23\u0e39\u0e1b\u0e41\u0e1a\u0e1a Decimal</li> <li>\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07:      <pre><code>11000000.10101000.00101000.01100000 \u2192 192.168.40.96\n</code></pre></li> </ol>"},{"location":"Day3%20Admin/public_network/#_7","title":"\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19","text":""},{"location":"Day3%20Admin/public_network/#cidr-27","title":"CIDR: <code>/27</code>","text":"<ul> <li>\u0e2b\u0e21\u0e32\u0e22\u0e16\u0e36\u0e07 Subnet Mask \u0e40\u0e17\u0e48\u0e32\u0e01\u0e31\u0e1a <code>255.255.255.224</code> (27 \u0e1a\u0e34\u0e15\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a Network, \u0e40\u0e2b\u0e25\u0e37\u0e2d 5 \u0e1a\u0e34\u0e15\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a Host)</li> <li>\u0e08\u0e33\u0e19\u0e27\u0e19 IP \u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14\u0e43\u0e19 Subnet: \\( 2^5 = 32 \\)</li> </ul>"},{"location":"Day3%20Admin/public_network/#network-address_1","title":"Network Address","text":"<ul> <li>\u0e43\u0e0a\u0e49\u0e04\u0e48\u0e32\u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19\u0e02\u0e2d\u0e07\u0e0a\u0e48\u0e27\u0e07 IP \u0e43\u0e19 Subnet</li> <li>192.168.40.96 (\u0e40\u0e1b\u0e47\u0e19 Network Address \u0e02\u0e2d\u0e07 Subnet \u0e17\u0e35\u0e48\u0e04\u0e23\u0e2d\u0e1a\u0e04\u0e25\u0e38\u0e21 <code>192.168.40.100</code>)</li> </ul>"},{"location":"Day3%20Admin/public_network/#broadcast-address","title":"Broadcast Address","text":"<ul> <li>\u0e43\u0e0a\u0e49\u0e04\u0e48\u0e32 IP \u0e2a\u0e38\u0e14\u0e17\u0e49\u0e32\u0e22\u0e02\u0e2d\u0e07\u0e0a\u0e48\u0e27\u0e07 Subnet</li> <li>192.168.40.127</li> </ul>"},{"location":"Day3%20Admin/public_network/#ip-usable-range","title":"\u0e0a\u0e48\u0e27\u0e07 IP \u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49\u0e44\u0e14\u0e49 (Usable Range)","text":"<ul> <li>\u0e25\u0e1a Network Address \u0e41\u0e25\u0e30 Broadcast Address \u0e2d\u0e2d\u0e01</li> <li>Usable Range: <code>192.168.40.97</code> \u0e16\u0e36\u0e07 <code>192.168.40.126</code></li> </ul>"},{"location":"Day3%20Admin/public_network/#ip","title":"\u0e2a\u0e23\u0e38\u0e1b\u0e15\u0e32\u0e23\u0e32\u0e07 ip","text":"\u0e1b\u0e23\u0e30\u0e40\u0e20\u0e17 \u0e04\u0e48\u0e32 Network Address <code>192.168.40.96</code> Subnet Mask <code>255.255.255.224</code> Broadcast Address <code>192.168.40.127</code> Usable IP Range <code>192.168.40.97-126</code> \u0e08\u0e33\u0e19\u0e27\u0e19 IP \u0e43\u0e0a\u0e49\u0e44\u0e14\u0e49 <code>30 IP</code>"},{"location":"Day3%20Admin/public_network/#br-ex-openstack","title":"br-ex \u0e43\u0e19 OpenStack: \u0e2d\u0e18\u0e34\u0e1a\u0e32\u0e22\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14","text":"<p>br-ex \u0e40\u0e1b\u0e47\u0e19\u0e0a\u0e37\u0e48\u0e2d\u0e02\u0e2d\u0e07 bridge \u0e2b\u0e23\u0e37\u0e2d \u0e2a\u0e27\u0e34\u0e15\u0e0a\u0e4c\u0e40\u0e2a\u0e21\u0e37\u0e2d\u0e19 \u0e2b\u0e19\u0e36\u0e48\u0e07\u0e43\u0e19 OpenStack \u0e0b\u0e36\u0e48\u0e07\u0e21\u0e35\u0e1a\u0e17\u0e1a\u0e32\u0e17\u0e2a\u0e33\u0e04\u0e31\u0e0d\u0e43\u0e19\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\u0e20\u0e32\u0e22\u0e43\u0e19\u0e02\u0e2d\u0e07\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e40\u0e2a\u0e21\u0e37\u0e2d\u0e19 (VM) \u0e40\u0e02\u0e49\u0e32\u0e01\u0e31\u0e1a\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\u0e20\u0e32\u0e22\u0e19\u0e2d\u0e01 \u0e43\u0e19\u0e2a\u0e20\u0e32\u0e1e\u0e41\u0e27\u0e14\u0e25\u0e49\u0e2d\u0e21\u0e02\u0e2d\u0e07 OpenStack \u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49 Open vSwitch (OVS) \u0e40\u0e1b\u0e47\u0e19\u0e2b\u0e25\u0e31\u0e01 br-ex \u0e08\u0e30\u0e17\u0e33\u0e2b\u0e19\u0e49\u0e32\u0e17\u0e35\u0e48\u0e40\u0e1b\u0e47\u0e19\u0e08\u0e38\u0e14\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e23\u0e30\u0e2b\u0e27\u0e48\u0e32\u0e07\u0e1e\u0e2d\u0e23\u0e4c\u0e15\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\u0e17\u0e32\u0e07\u0e01\u0e32\u0e22\u0e20\u0e32\u0e1e (physical network interface) \u0e41\u0e25\u0e30\u0e1e\u0e2d\u0e23\u0e4c\u0e15\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\u0e40\u0e2a\u0e21\u0e37\u0e2d\u0e19\u0e17\u0e35\u0e48\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e02\u0e36\u0e49\u0e19\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a VM \u0e15\u0e48\u0e32\u0e07\u0e46</p> <p>\u0e17\u0e33\u0e44\u0e21\u0e16\u0e36\u0e07\u0e40\u0e23\u0e35\u0e22\u0e01\u0e27\u0e48\u0e32 br-ex?</p> <ol> <li>br: \u0e22\u0e48\u0e2d\u0e21\u0e32\u0e08\u0e32\u0e01 bridge \u0e2b\u0e23\u0e37\u0e2d \u0e2a\u0e27\u0e34\u0e15\u0e0a\u0e4c \u0e0b\u0e36\u0e48\u0e07\u0e40\u0e1b\u0e47\u0e19\u0e2d\u0e38\u0e1b\u0e01\u0e23\u0e13\u0e4c\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e2b\u0e25\u0e32\u0e22\u0e46 \u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\u0e40\u0e02\u0e49\u0e32\u0e14\u0e49\u0e27\u0e22\u0e01\u0e31\u0e19</li> <li>ex: \u0e2d\u0e32\u0e08\u0e22\u0e48\u0e2d\u0e21\u0e32\u0e08\u0e32\u0e01 external \u0e2b\u0e23\u0e37\u0e2d exchange \u0e0b\u0e36\u0e48\u0e07\u0e1a\u0e48\u0e07\u0e1a\u0e2d\u0e01\u0e27\u0e48\u0e32 bridge \u0e19\u0e35\u0e49\u0e17\u0e33\u0e2b\u0e19\u0e49\u0e32\u0e17\u0e35\u0e48\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e01\u0e31\u0e1a\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\u0e20\u0e32\u0e22\u0e19\u0e2d\u0e01</li> </ol> <p>\u0e1a\u0e17\u0e1a\u0e32\u0e17\u0e2b\u0e25\u0e31\u0e01\u0e02\u0e2d\u0e07 br-ex</p> <ol> <li>\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\u0e20\u0e32\u0e22\u0e43\u0e19\u0e01\u0e31\u0e1a\u0e20\u0e32\u0e22\u0e19\u0e2d\u0e01: br-ex \u0e08\u0e30\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e1e\u0e2d\u0e23\u0e4c\u0e15\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\u0e17\u0e32\u0e07\u0e01\u0e32\u0e22\u0e20\u0e32\u0e1e\u0e02\u0e2d\u0e07\u0e40\u0e0b\u0e34\u0e23\u0e4c\u0e1f\u0e40\u0e27\u0e2d\u0e23\u0e4c\u0e17\u0e35\u0e48\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07 OpenStack \u0e40\u0e02\u0e49\u0e32\u0e01\u0e31\u0e1a\u0e1e\u0e2d\u0e23\u0e4c\u0e15\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\u0e40\u0e2a\u0e21\u0e37\u0e2d\u0e19\u0e17\u0e35\u0e48\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e02\u0e36\u0e49\u0e19\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a VM \u0e15\u0e48\u0e32\u0e07\u0e46 \u0e17\u0e33\u0e43\u0e2b\u0e49 VM \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e2a\u0e37\u0e48\u0e2d\u0e2a\u0e32\u0e23\u0e01\u0e31\u0e1a\u0e42\u0e25\u0e01\u0e20\u0e32\u0e22\u0e19\u0e2d\u0e01\u0e44\u0e14\u0e49</li> <li>\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e01\u0e32\u0e23\u0e23\u0e31\u0e1a\u0e2a\u0e48\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25: br-ex \u0e08\u0e30\u0e17\u0e33\u0e2b\u0e19\u0e49\u0e32\u0e17\u0e35\u0e48\u0e23\u0e31\u0e1a\u0e2a\u0e48\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e23\u0e30\u0e2b\u0e27\u0e48\u0e32\u0e07 VM \u0e15\u0e48\u0e32\u0e07\u0e46 \u0e41\u0e25\u0e30\u0e23\u0e30\u0e2b\u0e27\u0e48\u0e32\u0e07 VM \u0e01\u0e31\u0e1a\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\u0e20\u0e32\u0e22\u0e19\u0e2d\u0e01 \u0e42\u0e14\u0e22\u0e2d\u0e32\u0e28\u0e31\u0e22\u0e2b\u0e25\u0e31\u0e01\u0e01\u0e32\u0e23\u0e17\u0e33\u0e07\u0e32\u0e19\u0e02\u0e2d\u0e07 bridge \u0e43\u0e19\u0e01\u0e32\u0e23\u0e15\u0e31\u0e14\u0e2a\u0e34\u0e19\u0e43\u0e08\u0e27\u0e48\u0e32\u0e08\u0e30\u0e2a\u0e48\u0e07\u0e41\u0e1e\u0e47\u0e01\u0e40\u0e01\u0e47\u0e15\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e44\u0e1b\u0e22\u0e31\u0e07\u0e1e\u0e2d\u0e23\u0e4c\u0e15\u0e43\u0e14</li> <li>\u0e2a\u0e23\u0e49\u0e32\u0e07 VLAN: br-ex \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49\u0e43\u0e19\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 VLAN (Virtual Local Area Network) \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e41\u0e22\u0e01\u0e01\u0e25\u0e38\u0e48\u0e21\u0e02\u0e2d\u0e07 VM \u0e2d\u0e2d\u0e01\u0e08\u0e32\u0e01\u0e01\u0e31\u0e19 \u0e17\u0e33\u0e43\u0e2b\u0e49\u0e41\u0e15\u0e48\u0e25\u0e30\u0e01\u0e25\u0e38\u0e48\u0e21\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e2a\u0e37\u0e48\u0e2d\u0e2a\u0e32\u0e23\u0e01\u0e31\u0e19\u0e44\u0e14\u0e49\u0e20\u0e32\u0e22\u0e43\u0e19\u0e01\u0e25\u0e38\u0e48\u0e21\u0e42\u0e14\u0e22\u0e44\u0e21\u0e48\u0e23\u0e1a\u0e01\u0e27\u0e19\u0e01\u0e25\u0e38\u0e48\u0e21\u0e2d\u0e37\u0e48\u0e19\u0e46</li> </ol> <p>\u0e01\u0e32\u0e23\u0e17\u0e33\u0e07\u0e32\u0e19\u0e02\u0e2d\u0e07 br-ex (\u0e43\u0e19\u0e20\u0e32\u0e1e\u0e23\u0e27\u0e21)</p> <ul> <li>\u0e40\u0e21\u0e37\u0e48\u0e2d\u0e21\u0e35\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 VM \u0e02\u0e36\u0e49\u0e19\u0e21\u0e32 OpenStack \u0e08\u0e30\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e1e\u0e2d\u0e23\u0e4c\u0e15\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\u0e40\u0e2a\u0e21\u0e37\u0e2d\u0e19\u0e02\u0e36\u0e49\u0e19\u0e21\u0e32\u0e2b\u0e19\u0e36\u0e48\u0e07\u0e1e\u0e2d\u0e23\u0e4c\u0e15 \u0e41\u0e25\u0e30\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e1e\u0e2d\u0e23\u0e4c\u0e15\u0e19\u0e35\u0e49\u0e40\u0e02\u0e49\u0e32\u0e01\u0e31\u0e1a br-ex</li> <li>\u0e41\u0e1e\u0e47\u0e01\u0e40\u0e01\u0e47\u0e15\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48\u0e2a\u0e48\u0e07\u0e21\u0e32\u0e08\u0e32\u0e01 VM \u0e08\u0e30\u0e16\u0e39\u0e01\u0e2a\u0e48\u0e07\u0e1c\u0e48\u0e32\u0e19 br-ex \u0e44\u0e1b\u0e22\u0e31\u0e07\u0e1e\u0e2d\u0e23\u0e4c\u0e15\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\u0e17\u0e32\u0e07\u0e01\u0e32\u0e22\u0e20\u0e32\u0e1e\u0e17\u0e35\u0e48\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e01\u0e31\u0e1a\u0e2a\u0e27\u0e34\u0e15\u0e0a\u0e4c\u0e20\u0e32\u0e22\u0e19\u0e2d\u0e01</li> <li>\u0e41\u0e1e\u0e47\u0e01\u0e40\u0e01\u0e47\u0e15\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48\u0e2a\u0e48\u0e07\u0e21\u0e32\u0e08\u0e32\u0e01\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\u0e20\u0e32\u0e22\u0e19\u0e2d\u0e01\u0e08\u0e30\u0e16\u0e39\u0e01\u0e2a\u0e48\u0e07\u0e1c\u0e48\u0e32\u0e19 br-ex \u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e22\u0e31\u0e07\u0e1e\u0e2d\u0e23\u0e4c\u0e15\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\u0e40\u0e2a\u0e21\u0e37\u0e2d\u0e19\u0e02\u0e2d\u0e07 VM \u0e17\u0e35\u0e48\u0e40\u0e1b\u0e47\u0e19\u0e1b\u0e25\u0e32\u0e22\u0e17\u0e32\u0e07</li> </ul> <p>\u0e2a\u0e23\u0e38\u0e1b br-ex \u0e40\u0e1b\u0e47\u0e19\u0e2d\u0e07\u0e04\u0e4c\u0e1b\u0e23\u0e30\u0e01\u0e2d\u0e1a\u0e2a\u0e33\u0e04\u0e31\u0e0d\u0e43\u0e19\u0e2a\u0e16\u0e32\u0e1b\u0e31\u0e15\u0e22\u0e01\u0e23\u0e23\u0e21\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\u0e02\u0e2d\u0e07 OpenStack \u0e17\u0e35\u0e48\u0e0a\u0e48\u0e27\u0e22\u0e43\u0e19\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e41\u0e25\u0e30\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e01\u0e32\u0e23\u0e23\u0e31\u0e1a\u0e2a\u0e48\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e23\u0e30\u0e2b\u0e27\u0e48\u0e32\u0e07 VM \u0e15\u0e48\u0e32\u0e07\u0e46 \u0e41\u0e25\u0e30\u0e23\u0e30\u0e2b\u0e27\u0e48\u0e32\u0e07 VM \u0e01\u0e31\u0e1a\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\u0e20\u0e32\u0e22\u0e19\u0e2d\u0e01 \u0e01\u0e32\u0e23\u0e17\u0e33\u0e04\u0e27\u0e32\u0e21\u0e40\u0e02\u0e49\u0e32\u0e43\u0e08\u0e1a\u0e17\u0e1a\u0e32\u0e17\u0e02\u0e2d\u0e07 br-ex \u0e08\u0e30\u0e0a\u0e48\u0e27\u0e22\u0e43\u0e2b\u0e49\u0e1c\u0e39\u0e49\u0e14\u0e39\u0e41\u0e25\u0e23\u0e30\u0e1a\u0e1a\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e41\u0e01\u0e49\u0e44\u0e02\u0e1b\u0e31\u0e0d\u0e2b\u0e32\u0e41\u0e25\u0e30\u0e1b\u0e23\u0e31\u0e1a\u0e41\u0e15\u0e48\u0e07\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\u0e02\u0e2d\u0e07 OpenStack \u0e44\u0e14\u0e49\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e21\u0e35\u0e1b\u0e23\u0e30\u0e2a\u0e34\u0e17\u0e18\u0e34\u0e20\u0e32\u0e1e</p> <p>br-ex \u0e41\u0e15\u0e01\u0e15\u0e48\u0e32\u0e07\u0e08\u0e32\u0e01 Bridge \u0e2d\u0e37\u0e48\u0e19\u0e46 \u0e43\u0e19 OpenStack \u0e2d\u0e22\u0e48\u0e32\u0e07\u0e44\u0e23</p> <p>br-ex \u0e40\u0e1b\u0e47\u0e19 bridge \u0e1e\u0e34\u0e40\u0e28\u0e29\u0e43\u0e19 OpenStack \u0e17\u0e35\u0e48\u0e21\u0e35\u0e1a\u0e17\u0e1a\u0e32\u0e17\u0e2a\u0e33\u0e04\u0e31\u0e0d\u0e43\u0e19\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\u0e20\u0e32\u0e22\u0e43\u0e19\u0e02\u0e2d\u0e07\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e40\u0e2a\u0e21\u0e37\u0e2d\u0e19 (VM) \u0e40\u0e02\u0e49\u0e32\u0e01\u0e31\u0e1a\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\u0e20\u0e32\u0e22\u0e19\u0e2d\u0e01 \u0e42\u0e14\u0e22\u0e40\u0e09\u0e1e\u0e32\u0e30\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e22\u0e34\u0e48\u0e07\u0e43\u0e19\u0e01\u0e32\u0e23\u0e2a\u0e48\u0e07\u0e15\u0e48\u0e2d traffic \u0e08\u0e32\u0e01 provider network \u0e44\u0e1b\u0e22\u0e31\u0e07 physical network</p> <p>\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e40\u0e02\u0e49\u0e32\u0e43\u0e08\u0e04\u0e27\u0e32\u0e21\u0e41\u0e15\u0e01\u0e15\u0e48\u0e32\u0e07\u0e44\u0e14\u0e49\u0e0a\u0e31\u0e14\u0e40\u0e08\u0e19\u0e02\u0e36\u0e49\u0e19 \u0e25\u0e2d\u0e07\u0e40\u0e1b\u0e23\u0e35\u0e22\u0e1a\u0e40\u0e17\u0e35\u0e22\u0e1a br-ex \u0e01\u0e31\u0e1a bridge \u0e2d\u0e37\u0e48\u0e19\u0e46 \u0e17\u0e35\u0e48\u0e1e\u0e1a\u0e44\u0e14\u0e49\u0e17\u0e31\u0e48\u0e27\u0e44\u0e1b\u0e43\u0e19 OpenStack \u0e40\u0e0a\u0e48\u0e19 br-int \u0e41\u0e25\u0e30 br-tun</p> <p>br-ex vs. br-int</p> <ul> <li>br-int: \u0e40\u0e1b\u0e47\u0e19 bridge \u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e1e\u0e2d\u0e23\u0e4c\u0e15\u0e02\u0e2d\u0e07 router (qg-xxx) \u0e40\u0e02\u0e49\u0e32\u0e01\u0e31\u0e1a patch port \u0e17\u0e35\u0e48\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e44\u0e1b\u0e22\u0e31\u0e07 br-ex \u0e17\u0e33\u0e2b\u0e19\u0e49\u0e32\u0e17\u0e35\u0e48\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e31\u0e27\u0e01\u0e25\u0e32\u0e07\u0e43\u0e19\u0e01\u0e32\u0e23\u0e23\u0e31\u0e1a\u0e2a\u0e48\u0e07 traffic \u0e23\u0e30\u0e2b\u0e27\u0e48\u0e32\u0e07 network provider \u0e01\u0e31\u0e1a network tenant</li> <li>br-ex: \u0e17\u0e33\u0e2b\u0e19\u0e49\u0e32\u0e17\u0e35\u0e48\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d patch port \u0e08\u0e32\u0e01 br-int \u0e40\u0e02\u0e49\u0e32\u0e01\u0e31\u0e1a\u0e1e\u0e2d\u0e23\u0e4c\u0e15\u0e17\u0e32\u0e07\u0e01\u0e32\u0e22\u0e20\u0e32\u0e1e (physical port) \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e2a\u0e48\u0e07 traffic \u0e2d\u0e2d\u0e01\u0e44\u0e1b\u0e22\u0e31\u0e07\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\u0e20\u0e32\u0e22\u0e19\u0e2d\u0e01</li> </ul> <p>br-ex vs. br-tun</p> <ul> <li>br-tun: \u0e43\u0e0a\u0e49\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 tunnel \u0e2b\u0e23\u0e37\u0e2d\u0e2d\u0e38\u0e42\u0e21\u0e07\u0e04\u0e4c\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e2a\u0e37\u0e48\u0e2d\u0e2a\u0e32\u0e23\u0e23\u0e30\u0e2b\u0e27\u0e48\u0e32\u0e07 node \u0e15\u0e48\u0e32\u0e07\u0e46 \u0e42\u0e14\u0e22\u0e40\u0e09\u0e1e\u0e32\u0e30\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e22\u0e34\u0e48\u0e07\u0e43\u0e19\u0e01\u0e23\u0e13\u0e35\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22 overlay</li> <li>br-ex: \u0e44\u0e21\u0e48\u0e44\u0e14\u0e49\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e02\u0e49\u0e2d\u0e07\u0e42\u0e14\u0e22\u0e15\u0e23\u0e07\u0e01\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 tunnel \u0e41\u0e15\u0e48\u0e21\u0e35\u0e2b\u0e19\u0e49\u0e32\u0e17\u0e35\u0e48\u0e43\u0e19\u0e01\u0e32\u0e23\u0e2a\u0e48\u0e07\u0e15\u0e48\u0e2d traffic \u0e17\u0e35\u0e48\u0e1c\u0e48\u0e32\u0e19 tunnel \u0e21\u0e32\u0e41\u0e25\u0e49\u0e27\u0e44\u0e1b\u0e22\u0e31\u0e07\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\u0e20\u0e32\u0e22\u0e19\u0e2d\u0e01   \u0e2a\u0e23\u0e38\u0e1b: br-tun \u0e40\u0e19\u0e49\u0e19\u0e40\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 tunnel \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e2a\u0e37\u0e48\u0e2d\u0e2a\u0e32\u0e23\u0e23\u0e30\u0e2b\u0e27\u0e48\u0e32\u0e07 node \u0e02\u0e13\u0e30\u0e17\u0e35\u0e48 br-ex \u0e40\u0e19\u0e49\u0e19\u0e40\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e2a\u0e48\u0e07\u0e15\u0e48\u0e2d traffic \u0e2d\u0e2d\u0e01\u0e44\u0e1b\u0e22\u0e31\u0e07\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\u0e20\u0e32\u0e22\u0e19\u0e2d\u0e01</li> </ul> Bridge \u0e2b\u0e19\u0e49\u0e32\u0e17\u0e35\u0e48\u0e2b\u0e25\u0e31\u0e01 \u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e01\u0e31\u0e1a br-ex \u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\u0e20\u0e32\u0e22\u0e43\u0e19\u0e01\u0e31\u0e1a\u0e20\u0e32\u0e22\u0e19\u0e2d\u0e01 patch port \u0e08\u0e32\u0e01 br-int, \u0e1e\u0e2d\u0e23\u0e4c\u0e15\u0e17\u0e32\u0e07\u0e01\u0e32\u0e22\u0e20\u0e32\u0e1e br-int \u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e21\u0e15\u0e48\u0e2d router \u0e01\u0e31\u0e1a br-ex \u0e1e\u0e2d\u0e23\u0e4c\u0e15\u0e02\u0e2d\u0e07 router, patch port \u0e44\u0e1b\u0e22\u0e31\u0e07 br-ex br-tun \u0e2a\u0e23\u0e49\u0e32\u0e07 tunnel \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e2a\u0e37\u0e48\u0e2d\u0e2a\u0e32\u0e23\u0e23\u0e30\u0e2b\u0e27\u0e48\u0e32\u0e07 node node \u0e15\u0e48\u0e32\u0e07\u0e46 <p></p>"},{"location":"Day3%20Admin/summary/","title":"\u0e2a\u0e23\u0e38\u0e1b \u0e04\u0e27\u0e32\u0e21\u0e40\u0e02\u0e49\u0e32\u0e43\u0e08","text":""},{"location":"Day3%20Admin/summary/#openstack-dalmatian-20242-services-and-their-roles","title":"OpenStack Dalmatian (2024.2) Services and Their Roles","text":"<p>OpenStack \u0e40\u0e1b\u0e47\u0e19\u0e41\u0e1e\u0e25\u0e15\u0e1f\u0e2d\u0e23\u0e4c\u0e21\u0e42\u0e2d\u0e40\u0e1e\u0e48\u0e19\u0e0b\u0e2d\u0e23\u0e4c\u0e2a\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a Cloud Infrastructure-as-a-Service (IaaS) \u0e21\u0e35\u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23\u0e2b\u0e25\u0e32\u0e01\u0e2b\u0e25\u0e32\u0e22\u0e17\u0e35\u0e48\u0e0a\u0e48\u0e27\u0e22\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e17\u0e23\u0e31\u0e1e\u0e22\u0e32\u0e01\u0e23\u0e43\u0e19\u0e14\u0e32\u0e15\u0e49\u0e32\u0e40\u0e0b\u0e47\u0e19\u0e40\u0e15\u0e2d\u0e23\u0e4c:</p>"},{"location":"Day3%20Admin/summary/#openstack-dalmatian","title":"\u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23\u0e2b\u0e25\u0e31\u0e01\u0e43\u0e19 OpenStack Dalmatian","text":"<ol> <li> <p>Nova (Compute Service)</p> </li> <li> <p>\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e41\u0e25\u0e30\u0e2a\u0e23\u0e49\u0e32\u0e07 Virtual Machines (VMs)</p> </li> <li> <p>\u0e23\u0e2d\u0e07\u0e23\u0e31\u0e1a GPU \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e07\u0e32\u0e19 AI \u0e41\u0e25\u0e30 Machine Learning</p> </li> <li> <p>Neutron (Networking Service)</p> </li> <li> <p>\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22 Virtual Network \u0e40\u0e0a\u0e48\u0e19 Load Balancers, Firewalls</p> </li> <li> <p>Cinder (Block Storage Service)</p> </li> <li> <p>\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 Volume Storage \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a Virtual Machines \u0e41\u0e25\u0e30\u0e41\u0e2d\u0e1b\u0e1e\u0e25\u0e34\u0e40\u0e04\u0e0a\u0e31\u0e19</p> </li> <li> <p>Glance (Image Service)</p> </li> <li> <p>\u0e40\u0e01\u0e47\u0e1a\u0e41\u0e25\u0e30\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 VM Images \u0e40\u0e0a\u0e48\u0e19 Image \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e2a\u0e23\u0e49\u0e32\u0e07 Virtual Machine</p> </li> <li> <p>Swift (Object Storage Service)</p> </li> <li> <p>\u0e08\u0e31\u0e14\u0e40\u0e01\u0e47\u0e1a\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e41\u0e1a\u0e1a Object Storage \u0e40\u0e2b\u0e21\u0e32\u0e30\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e44\u0e1f\u0e25\u0e4c\u0e02\u0e19\u0e32\u0e14\u0e43\u0e2b\u0e0d\u0e48\u0e2b\u0e23\u0e37\u0e2d\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48\u0e44\u0e21\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23 Block Storage</p> </li> <li> <p>Horizon (Dashboard)</p> </li> <li> <p>\u0e41\u0e14\u0e0a\u0e1a\u0e2d\u0e23\u0e4c\u0e14\u0e41\u0e1a\u0e1a Web UI \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e1c\u0e39\u0e49\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e41\u0e25\u0e30\u0e1c\u0e39\u0e49\u0e14\u0e39\u0e41\u0e25\u0e23\u0e30\u0e1a\u0e1a\u0e43\u0e19\u0e01\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e17\u0e23\u0e31\u0e1e\u0e22\u0e32\u0e01\u0e23</p> </li> <li> <p>Keystone (Identity Service)</p> </li> <li> <p>\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e01\u0e32\u0e23\u0e22\u0e37\u0e19\u0e22\u0e31\u0e19\u0e15\u0e31\u0e27\u0e15\u0e19\u0e41\u0e25\u0e30\u0e2a\u0e34\u0e17\u0e18\u0e34\u0e4c\u0e01\u0e32\u0e23\u0e40\u0e02\u0e49\u0e32\u0e16\u0e36\u0e07\u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23\u0e15\u0e48\u0e32\u0e07 \u0e46 \u0e43\u0e19 OpenStack</p> </li> <li> <p>Heat (Orchestration Service)</p> </li> <li> <p>\u0e0a\u0e48\u0e27\u0e22\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 Deployment Automation \u0e02\u0e2d\u0e07\u0e17\u0e23\u0e31\u0e1e\u0e22\u0e32\u0e01\u0e23 \u0e40\u0e0a\u0e48\u0e19 \u0e01\u0e32\u0e23\u0e15\u0e31\u0e49\u0e07\u0e04\u0e48\u0e32 VM \u0e41\u0e25\u0e30\u0e40\u0e04\u0e23\u0e37\u0e2d\u0e02\u0e48\u0e32\u0e22\u0e41\u0e1a\u0e1a\u0e2d\u0e31\u0e15\u0e42\u0e19\u0e21\u0e31\u0e15\u0e34</p> </li> <li> <p>Ironic (Bare Metal Provisioning Service)</p> </li> <li> <p>\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 Bare Metal Server \u0e23\u0e2d\u0e07\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e01\u0e31\u0e1a Infrastructure-as-a-Service</p> </li> <li> <p>Manila (Shared File System Service)</p> </li> <li> <p>\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e41\u0e25\u0e30\u0e41\u0e0a\u0e23\u0e4c\u0e44\u0e1f\u0e25\u0e4c\u0e1c\u0e48\u0e32\u0e19 Network File System (NFS) \u0e41\u0e25\u0e30 CIFS</p> </li> </ol>"},{"location":"Day3%20Admin/summary/#openstack-dalmatian_1","title":"\u0e1f\u0e35\u0e40\u0e08\u0e2d\u0e23\u0e4c\u0e43\u0e2b\u0e21\u0e48\u0e43\u0e19 OpenStack Dalmatian","text":"<ul> <li>Skyline UI: \u0e2a\u0e48\u0e27\u0e19\u0e15\u0e34\u0e14\u0e15\u0e48\u0e2d\u0e1c\u0e39\u0e49\u0e43\u0e0a\u0e49\u0e41\u0e1a\u0e1a\u0e43\u0e2b\u0e21\u0e48\u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e07\u0e48\u0e32\u0e22\u0e41\u0e25\u0e30\u0e17\u0e31\u0e19\u0e2a\u0e21\u0e31\u0e22</li> <li>\u0e23\u0e2d\u0e07\u0e23\u0e31\u0e1a Workload \u0e17\u0e35\u0e48\u0e2b\u0e25\u0e32\u0e01\u0e2b\u0e25\u0e32\u0e22 \u0e40\u0e0a\u0e48\u0e19 AI, HPC \u0e41\u0e25\u0e30 Machine Learning</li> </ul>"},{"location":"Day3%20Admin/summary/#watch-skyline-ui-introduction","title":"Watch Skyline UI introduction","text":"<p>https://www.youtube.com/watch?v=pFAJLwzxv0A</p>"},{"location":"Day3%20Admin/summary/#_2","title":"\u0e2d\u0e49\u0e32\u0e07\u0e2d\u0e34\u0e07","text":"<ul> <li>OpenStack Documentation</li> <li>OpenStack Dalmatian Release Notes</li> </ul>"},{"location":"Day3%20Admin/workshop/","title":"Workshop","text":""},{"location":"Day3%20Admin/workshop/#openstack-admin","title":"Openstack Admin","text":"<p>Download Workshop</p>"},{"location":"Day3%20Admin/workshop/#openstack-command","title":"Openstack command","text":"<p>Download Book</p>"}]}